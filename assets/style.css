@import url(./global.css);

/*Seletores
 1. Seletores de Tag/Tipo
 2. Seletores de Id > #tipo{}
 3. Seletores de Classes > .tipo{}
 4. Seletores de Universal > *{}
 5. Seletores de Atributo: 
    [Atributo]{} em conjunto com o valor [Atributo="valor"]{}
    [Atributo~="valor"]{} se tiver mas de uma valor dentro coloca ~ que vc seta.
    [Atributo*="valor1"]{} procura valor especifico dentro do valor.

    Selecionar mais de um seletor
        vc colca um ( , ) para separa. Exemplo:
        h1, .texto, #link-referencia{ color: blue }

    Selecionando de uma fomato pai e finho, conbinador desedente.
        vc coloca ele todo junto Exemplo:
        p.texto{} neste exemplo o pai e tag p e finho e .texto e edita o finho.

Combinadores: rela√ß√£o entre dois seletores.

 1. Combinador desendente (espa√ßo) Elemento dentro de outro: div p
 2. Combinador filho (>) Filho direto: div > p
 3. Combinador irm√£o adjacente (+) Irm√£o ao lado imediato: h1 + p
 4. Combinador irm√£o em Geral (~) Todos os irm√£os seguintes: h1 ~ p
 
 Estrutura:
 [SELETOR] [COMBINADOR] [SELETOR]
*/

/*Largura e Altura
    width > Largura
    Height > Altura

    width:auto > ele aumenta a largura de acordo com o conteudo dentro da tag.
    width:initial > ele aplica o valor padr√£o da tag.
    width:inherit > ele vai aplicar a largura do tag pai. 

    max-width:200px > ele informa a largura maxima que le pode creser
    min-width:200px > ele aplica o valor minimo que ele pode creser


*/

/*Margin 

margin: 20px;
Margin ele coloca uma distancia da linha da tag para fora. Vc pode trabalhar com valores negativos. 

margin: auto > ele sentraliza a tag no centro da tela.

margin: 10px 10px 10px 10px:
    o primeiro valor parte de cima.
    segundo valor para a esquerda
    terceiro valor para baicho 
    quarto valor para a esquerda    
    
vc conseque colocar margins para dire√ß√£o especifica.
    margin-top: ; 
    margin-right: ;
    margin-bottom: ;
    margin-left: ;
*/

/*Padding

padding:10px;
Ele coloca uma distancia da linha da tag para dentro. Vc pode usar numero negativo.

padding: 10px 10px 10px 10px:
    o primeiro valor parte de cima.
    segundo valor para a esquerda
    terceiro valor para baicho.
    quarto valor para a esquerda.    
    
vc conseque colocar padding para dire√ß√£o especifica.
    padding-top:10px ; 
    padding-right:10px ;
    padding-bottom:10px ;
    padding-left:10px ;
*/

/*Box-sizing

box-sizing: border-box;

Quando vc coloca um Margin e Padding ele soma a o valor que vc colocou na margin com o tamanho do tag
o Box-sizing inpedi que ele expando a tag e implemente os valores que vc colocou na margin e padding dentro do valor da tag
sem inspandila.

*/

/*Cores
    RGB E RGBA
    RGB RED 0 >= 255, GREEN 0 >= 255, BLUE 0 >= 255.
    RGB RED 0 >= 255, GREEN 0 >= 255, BLUE 0 >= 255, ALPHA 0 >= 255 E ATRANSPARENCIA

    Hexadecimal
    A >= F
    00 >= 255
    #RED 0 >= 255, GREEN 0 >= 255, BLUE 0 >= 255, 10% >= Transparencia.

    HSL E HSLA
    H(matriz), S(satura√ß√£o), L(lumina√ß√£o);
    color: hsl(0,100%,30%);
    H(matriz), S(satura√ß√£o), L(lumina√ß√£o), A(Ilumina√ß√£o)
    color: hsla(0,100%,30%, 0.6);
*/

/*Imagen object-fit e object-position

A propriedade object-fit define como o conte√∫do de uma <img> (ou <video>,
 <iframe>, etc.) se ajusta dentro do container (geralmente uma <div>).
    object-fit:: -> O que faz.
    object-fit: contain; -> A imagem √© inteira vis√≠vel dentro do container, mantendo a propor√ß√£o. Pode sobrar espa√ßo em volta.
    object-fit: cover; -> A imagem preenche todo o container, mantendo a propor√ß√£o. Pode cortar partes da imagem.
    object-fit: none; -> A imagem mant√©m seu tamanho original, mesmo que ultrapasse o container.
    object-fit: scale-down -> 	A imagem ser√° reduzida proporcionalmente se for maior que o container, caso contr√°rio, se comporta como none.

A propriedade Object-position define a posi√ß√£o do conte√∫do dentro do elemento 
(geralmente <img>) quando o object-fit n√£o preenche perfeitamente o container.

Funciona principalmente com:
    object-fit: cover
    object-fit: none
    object-fit: scale-down
    (em contain, o efeito √© mais sutil)

üìå Valores Comuns de object-position:
    ‚úÖ center (padr√£o)
        object-position: center;
            A imagem fica centralizada (horizontal e verticalmente).
            Valor padr√£o se voc√™ n√£o definir nada.

    ‚úÖ top, bottom, left, right
        object-position: top;
        object-position: bottom;
        object-position: left;
        object-position: right;

        top: alinha o topo da imagem com o topo do container.
        bottom: alinha a base da imagem com a base do container.
        left: alinha a esquerda da imagem com a esquerda do container.
        right: alinha a direita da imagem com a direita do container.

üîÅ Combina√ß√µes:
    ‚úÖ top right
    object-position: top right;
        Alinha a imagem no canto superior direito do container.

    ‚úÖ bottom left
    object-position: bottom left;
        Alinha a imagem no canto inferior esquerdo.

üéØ Com Porcentagem ou Pixels:
    ‚úÖ object-position: 30% 70%;
    object-position: 30% 70%;
        O primeiro valor (30%) move a imagem da esquerda para a direita (horizontal).
        O segundo valor (70%) move de cima para baixo (vertical).
        Isso significa que a imagem vai aparecer mais deslocada para a direita e parte inferior do container.

    Exemplo:
    CSS
        div{
            width: 200px;
            height: 300px;
            border: 5px solid blue;
        }
        img{
            width: 100%;
            height: 100%;
        }
        #contain{
            object-fit: contain;
        }
        #cover{
            object-fit: cover;
        }
        #none{
            object-fit: none;
        }
        #scale-dow{
            object-fit: scale-down;
        }
    HTML
        <h1>Propriedade <code>Object-fit</Object></Object></code></h1>
        <code>Object-fit;</code> <b>(padr√£o)</b>
        <div> <img src="../Primeiro Pasta/img/nave_considero_realista.jpg" alt=""> </div>
        <br>
        <code>Object-fit; <b>contain</b></code> (padr√£o)
        <div> <img src="../Primeiro Pasta/img/nave_considero_realista.jpg" alt="" id="contain"> </div>
        <br>
        <code>Object-fit; <b>cover</b></code> (padr√£o)
        <div> <img src="../Primeiro Pasta/img/nave_considero_realista.jpg" alt="" id="cover"> </div>
        <br>
        <code>Object-fit; <b>none</b></code> (padr√£o)
        <div> <img src="../Primeiro Pasta/img/nave_considero_realista.jpg" alt="" id="none"> </div>
        <br>
        <code>Object-fit; <b>scale-dow</b></code> (padr√£o)
        <div> <img src="../Primeiro Pasta/img/nave_considero_realista.jpg" alt="" id="scale-dow"> </div>
        <br>
        <code>Object-fit; <b>scale-dow</b></code>(padr√£o)
        <div> <img src="../Primeiro Pasta/img/nave_considero_realista.jpg" alt="" id="scale-dow"> </div>
    
    */

/* background-image, background-size, background-repeat
üéØ A propriedade background-image permite definir uma imagem ou gradiente como plano de fundo de um elemento HTML, como uma <div>, <section>, <body>, etc.
    
‚úÖ 1. background-image: url(); -> Imagem de fundo
‚úÖ 2. background-image: linear-gradient(lightpink, palevioletred, purple); -> Gradiente linear (de cima para baixo)
‚úÖ 3. background-image: radial-gradient(lightpink, palevioletred, purple); -> Gradiente radial (do centro para as bordas)
‚úÖ 4. background-image: repeating-linear-gradient(to top, palevioletred 0 20px, lightpink 20px 40px); -> Gradiente linear repetido (efeito de faixa/zebra)
    
    ‚úÖ 1. Imagem de fundo
    background-image: url('../img/nave_considero_realista.jpg');
    Exibe uma imagem como fundo do elemento.
    O caminho (../img/...) depende da estrutura da sua pasta.
    Pode usar tamb√©m imagens da internet:
    background-image: url('https://exemplo.com/imagem.jpg');
    
    
    ‚úÖ 2. Gradiente linear (de cima para baixo)
    background-image: linear-gradient(lightpink, palevioletred, purple);
    Cria uma transi√ß√£o de cores linear.
    Neste exemplo: a cor vai de lightpink no topo at√© purple na base.
    Pode mudar a dire√ß√£o:
    linear-gradient(to right, red, yellow);
    
    
    ‚úÖ 3. Gradiente radial (do centro para as bordas)
    background-image: radial-gradient(lightpink, palevioletred, purple);
    As cores come√ßam no centro e v√£o at√© as bordas, como c√≠rculos conc√™ntricos.
    Pode controlar o formato:
    radial-gradient(circle at top left, red, blue);
    
    ‚úÖ 4. Gradiente linear repetido (efeito de faixa/zebra)
    background-image: repeating-linear-gradient(to top, palevioletred 0 20px, lightpink 20px 40px);
    Cria um padr√£o repetido com faixas de cor.
    Aqui:
    palevioletred vai de 0 a 20px
    lightpink de 20px a 40px
    Depois o padr√£o se repete at√© preencher todo o fundo
    Pode trocar a dire√ß√£o:
    to right, to left, 45deg, etc.
    
    
üéØ Usado junto com background-image, o background-size controla o tamanho da imagem de fundo no elemento.
    
    ‚úÖ 1. background-size: cover; 
    ‚úÖ 2. background-size: contain;
    ‚úÖ 3. background-size: 100px;
    ‚úÖ 4. background-size: 100px 100%;

    ‚úÖ 1. background-size: cover;
    A imagem cobre todo o elemento, mantendo a propor√ß√£o.
    Pode cortar partes da imagem para preencher tudo.
    Muito usado em banners e fotos de capa.
    
    ‚úÖ 2. background-size: contain;
    A imagem se ajusta inteira dentro do elemento, sem cortes.
    Mant√©m a propor√ß√£o, ent√£o pode sobrar espa√ßo (como margens) se a imagem e o container n√£o tiverem a mesma propor√ß√£o.
    
    ‚úÖ 3. background-size: 100px;
    Define apenas a largura da imagem (100px), e a altura √© ajustada automaticamente proporcionalmente.
    Equivalente a:
        background-size: 100px auto;
    
    ‚úÖ 4. background-size: 100px 100%;
    Define largura: 100px e altura: 100% do elemento.
    A imagem ser√° esticada ou encolhida sem manter a propor√ß√£o.

üéØ O que √© background-repeat?

    ‚úÖ 1. background-repeat: no-repeat round;
    ‚úÖ 2. background-repeat: repeat-x;
    ‚úÖ 3. background-repeat: repeat-y;
    ‚úÖ 4. background-repeat: space;
    ‚úÖ 5. background-repeat: round;
    ‚úÖ 6. background-repeat: no-repeat;

    ‚úÖ Tabela comparativa:
    Valor	    Efeito
    no-repeat	Mostra a imagem apenas uma vez
    repeat-x	Repete somente na horizontal
    repeat-y	Repete somente na vertical
    repeat      Repete a imagem nos dois eixos (x e y)
    space	    Repete com espa√ßos iguais entre as imagens
    round	    Redimensiona a imagem para encaixar certinho

    ‚úÖ 2. background-repeat: repeat-x;
    Repete a imagem somente no eixo horizontal (x).
    Na vertical, a imagem aparece uma √∫nica vez.
    üìå Ideal para barras de topo ou efeitos horizontais que precisam se repetir.

    ‚úÖ 3. background-repeat: repeat-y;
    Repete a imagem somente no eixo vertical (y).
    Na horizontal, aparece uma vez s√≥.
    üìå Usado para criar colunas visuais ou listras verticais.
    
    ‚úÖ 4. background-repeat: space;
    A imagem de fundo √© repetida com espa√ßos iguais entre as c√≥pias.
    Se a imagem n√£o couber perfeitamente, espa√ßos extras s√£o adicionados (sem cortar ou redimensionar a imagem).
    üìå Exemplo:
    Se 3 imagens cabem e sobra espa√ßo, ele distribui esse espa√ßo igualmente entre elas.
    
    ‚úÖ 5. background-repeat: round;
    A imagem de fundo √© redimensionada automaticamente para que caiba perfeitamente no container sem sobras.
    A imagem se repete, mas com o tamanho ajustado para encaixar certinho no espa√ßo total.
    üìå Exemplo:
    Se a imagem tem 60px e o container tem 200px, ele pode redimensionar para 50px para repetir 4 vezes sem corte.

    ‚úÖ 6. background-repeat: no-repeat;
    A imagem aparece s√≥ uma vez (sem repeti√ß√£o).
    √â o mais comum quando se usa imagens decorativas √∫nicas (ex: √≠cones, logos, fotos de fundo com cover).
    
    */

/* background-attachment, background-origin, background-blend-mode

üéØ Background-Attachment: 
    Essa propriedade define como a imagem de fundo se comporta em rela√ß√£o √† rolagem da p√°gina ou de um elemento com overflow.

    ‚úÖ Explica√ß√µes claras:
        Valor	        O que faz
        scroll(padr√£o)	A imagem de fundo rola junto com o conte√∫do da p√°gina ou da div.
        fixed	        A imagem de fundo fica fixa na tela (na viewport), mesmo que o conte√∫do role. D√° um efeito tipo "parallax".
        local	        A imagem de fundo rola junto com o conte√∫do da pr√≥pria div. √ötil em overflow: auto com rolagem interna.

    üîµ `fixed`
        - A imagem **fica fixa na tela**, como se estivesse colada no fundo da janela.
        - Mesmo rolando a p√°gina ou o conte√∫do da `div`, a imagem **n√£o se move**.
        - Isso s√≥ funciona bem se o elemento **n√£o estiver dentro de um elemento com `transform`, `perspective`, ou `filter` aplicado**.

    üîµ `scroll`
        - A imagem de fundo **rola junto com a p√°gina**, √© o comportamento **padr√£o**.
        - Se voc√™ rolar a p√°gina ou o conte√∫do da `div`, a imagem se mover√° com ele.

    üîµ `local`
        - A imagem **rola junto com o conte√∫do da `div`**.
        - Funciona apenas se a `div` **tem rolagem interna** (`overflow: auto` e bastante texto).
        - A imagem **fica fixa no conte√∫do**, e se movimenta ao rolar o conte√∫do da pr√≥pria `div`.

    Exemplo: 
        CSS
            body{ height: 200vh; }
                .exemplo{
                    width: 300px;
                    height: 300px;
                    background-image: url('../img/nave_considero_realista.jpg');
                    background-size: cover;
                    border: 1px solid red;
                    overflow: auto; -> overflow: auto; permite rolagem interna se o conte√∫do for maior que a div }
                #fixed{ background-attachment: fixed; }
                #scroll{ background-attachment: scroll; }
                #local{ background-attachment: local; }

        HTML
            <code>background-attachment: fixed;</code>
            <div class="exemplo" id="fixed">
                O que √© o Lorem Ipsum?
                O Lorem Ipsum √© um texto modelo da ind√∫stria tipogr√°fica e de impress√£o. O Lorem Ipsum tem vindo a ser o texto
                padr√£o usado por estas ind√∫strias desde o ano de 1500, quando uma misturou os caracteres de um texto para criar
                um esp√©cime de livro.
                Porque √© que o usamos?
                √â um facto estabelecido de que um leitor √© distra√≠do pelo conte√∫do leg√≠vel de uma p√°gina quando analisa a sua
                mancha gr√°fica. Logo, o uso de Lorem Ipsum leva a uma distribui√ß√£o mais ou menos normal de letras, ao contr√°rio
                do uso de "Conte√∫do aqui, conte√∫do aqui", tornando-o texto leg√≠vel. 
            </div>
            <code>background-attachment: scroll</code>
            <div class="exemplo" id="scroll">
                O que √© o Lorem Ipsum?
                O Lorem Ipsum √© um texto modelo da ind√∫stria tipogr√°fica e de impress√£o. O Lorem Ipsum tem vindo a ser o texto
                padr√£o usado por estas ind√∫strias desde o ano de 1500, quando uma misturou os caracteres de um texto para criar
                um esp√©cime de livro.
                Porque √© que o usamos?
                √â um facto estabelecido de que um leitor √© distra√≠do pelo conte√∫do leg√≠vel de uma p√°gina quando analisa a sua
                mancha gr√°fica. Logo, o uso de Lorem Ipsum leva a uma distribui√ß√£o mais ou menos normal de letras, ao contr√°rio
                do uso de "Conte√∫do aqui, conte√∫do aqui", tornando-o texto leg√≠vel. 
            </div>
            <code>background-attachment: local</code>
            <div class="exemplo" id="local">
                O que √© o Lorem Ipsum?
                O Lorem Ipsum √© um texto modelo da ind√∫stria tipogr√°fica e de impress√£o. O Lorem Ipsum tem vindo a ser o texto
                padr√£o usado por estas ind√∫strias desde o ano de 1500, quando uma misturou os caracteres de um texto para criar
                um esp√©cime de livro.
                Porque √© que o usamos?
                √â um facto estabelecido de que um leitor √© distra√≠do pelo conte√∫do leg√≠vel de uma p√°gina quando analisa a sua
                mancha gr√°fica. Logo, o uso de Lorem Ipsum leva a uma distribui√ß√£o mais ou menos normal de letras, ao contr√°rio
                do uso de "Conte√∫do aqui, conte√∫do aqui", tornando-o texto leg√≠vel. 
            </div>

üéØ background-origin: Define onde o plano de fundo (imagem, cor) come√ßa a ser desenhado dentro do elemento.

    ‚úÖ Explica√ß√µes claras:
        Valor	        Explica√ß√£o
        padding-box     O background come√ßa no in√≠cio da √°rea de padding (n√£o cobre a borda).
        border-box      O background come√ßa no in√≠cio da borda e cobre toda a √°rea do elemento.
        content-box     O background cobre apenas a √°rea de conte√∫do, ignorando padding e borda.

    üîµ padding-box
        Significado: O fundo come√ßa a ser desenhado a partir da √°rea de padding.
        Cobre: A √°rea de conte√∫do + padding.
        N√£o cobre: As bordas.
        Uso comum: Quando voc√™ quer que o fundo respeite a dist√¢ncia da borda, sem preench√™-la.

    üìå Exemplo visual:
        Imagine uma caixa com bordas, padding e conte√∫do. O fundo vai cobrir tudo exceto a borda.

    üîµ border-box
        Significado: O fundo come√ßa a ser desenhado desde a borda externa do elemento.
        Cobre: Conte√∫do + padding + borda.
        Uso comum: Quando voc√™ quer que o fundo se estenda por toda a √°rea do elemento, inclusive a borda.

    üìå Exemplo visual:
        A imagem ou cor de fundo vai ficar debaixo da borda tamb√©m, ocupando toda a caixa do elemento.

    üîµ content-box
        Significado: O fundo √© desenhado somente dentro da √°rea de conte√∫do.
        Cobre: Apenas a √°rea de conte√∫do.
        N√£o cobre: O padding nem a borda.
        Uso comum: Quando voc√™ quer que o fundo fique restrito ao conte√∫do, sem ocupar espa√ßo extra.

    üìå Exemplo visual:
        A imagem de fundo fica "encaixada" s√≥ no meio da caixa, sem tocar nas laterais (padding ou borda).

    Exemplo:
        .exemplo{
            width: 300px;
            height: 300px;
            background-image: url('../img/nave_considero_realista.jpg');
            background-size: 100% 100%;
            background-repeat: no-repeat;
            border: 15px dashed palegreen;
            padding: 30px;
        }
            
        #padding-box{
            background-origin: padding-box;
        }
            
        #border-box{
            background-origin: border-box;
        }
            
        #content-box{
            background-origin: content-box;
        }

üéØ background-clip: Controla at√© onde o plano de fundo pode se estender ou ser vis√≠vel.

    ‚úÖ Explica√ß√µes claras:
        Valor	        Onde o fundo termina
        border-box	    At√© a borda
        padding-box	    At√© o padding
        content-box	    At√© o conte√∫do

    üîµ border-box
        Significado: O fundo vai at√© o limite externo da borda.
        O que cobre: Conte√∫do + padding + borda.
        Efeito: A imagem ou cor de fundo aparece por baixo da borda.
        Uso comum: Para fazer com que o fundo ocupe toda a √°rea do elemento, inclusive onde h√° borda.

    üìå Dica: √â o valor padr√£o da maioria dos navegadores.

    üîµ padding-box
        Significado: O fundo termina no final do padding.
        O que cobre: Conte√∫do + padding.
        N√£o cobre: A borda (fica transparente ou da cor da borda).
        Uso comum: Quando voc√™ quer que o fundo fique dentro da borda, sem ultrapass√°-la.

    üìå Dica: Muito usado com elementos que t√™m bordas estilizadas, para n√£o interferir no visual da borda.

    üîµ content-box
        Significado: O fundo s√≥ √© vis√≠vel na √°rea de conte√∫do.
        O que cobre: Apenas a √°rea onde o conte√∫do (texto, imagens) est√°.
        N√£o cobre: Nem o padding, nem a borda.
        Uso comum: Quando voc√™ quer o fundo restrito ao conte√∫do, como em caixas com muito padding, mas sem interfer√™ncia visual no fundo.

    üß† Resumo com met√°fora:
        Pense no fundo como uma imagem que voc√™ cola dentro de uma caixa:
            background-origin: onde voc√™ posiciona a imagem (in√≠cio).
            background-clip: at√© onde voc√™ deixa ela vis√≠vel (fim).


    .exemplo {
            width: 300px;
            height: 300px;
            border: 15px dashed palegreen;
            color: white;
            padding: 30px;
            font-size: 35px;
            font-weight: 900;
            background-color: palevioletred;
            
            background-image: repeating-linear-gradient(45deg, transparent 5px, hsla(197, 62%, 11%, 0.5) 5px, hsla(197, 62%, 11%, 0.5) 10px,
            hsla(5, 53%, 63%, 0) 10px, hsla(5, 53%, 63%, 0) 35px, hsla(5, 53%, 63%, 0.5) 35px, hsla(5, 53%, 63%, 0.5) 40px,
            hsla(197, 62%, 11%, 0.5) 40px, hsla(197, 62%, 11%, 0.5) 50px, hsla(197, 62%, 11%, 0) 50px, hsla(197, 62%, 11%, 0) 60px,
            hsla(5, 53%, 63%, 0.5) 60px, hsla(5, 53%, 63%, 0.5) 70px, hsla(35, 91%, 65%, 0.5) 70px, hsla(35, 91%, 65%, 0.5) 80px,
            hsla(35, 91%, 65%, 0) 80px, hsla(35, 91%, 65%, 0) 90px, hsla(5, 53%, 63%, 0.5) 90px, hsla(5, 53%, 63%, 0.5) 110px,
            hsla(5, 53%, 63%, 0) 110px, hsla(5, 53%, 63%, 0) 120px, hsla(197, 62%, 11%, 0.5) 120px, hsla(197, 62%, 11%, 0.5) 140px
            ),
            repeating-linear-gradient(135deg, transparent 5px, hsla(197, 62%, 11%, 0.5) 5px, hsla(197, 62%, 11%, 0.5) 10px,
            hsla(5, 53%, 63%, 0) 10px, hsla(5, 53%, 63%, 0) 35px, hsla(5, 53%, 63%, 0.5) 35px, hsla(5, 53%, 63%, 0.5) 40px,
            hsla(197, 62%, 11%, 0.5) 40px, hsla(197, 62%, 11%, 0.5) 50px, hsla(197, 62%, 11%, 0) 50px, hsla(197, 62%, 11%, 0) 60px,
            hsla(5, 53%, 63%, 0.5) 60px, hsla(5, 53%, 63%, 0.5) 70px, hsla(35, 91%, 65%, 0.5) 70px, hsla(35, 91%, 65%, 0.5) 80px,
            hsla(35, 91%, 65%, 0) 80px, hsla(35, 91%, 65%, 0) 90px, hsla(5, 53%, 63%, 0.5) 90px, hsla(5, 53%, 63%, 0.5) 110px,
            hsla(5, 53%, 63%, 0) 110px, hsla(5, 53%, 63%, 0) 140px, hsla(197, 62%, 11%, 0.5) 140px, hsla(197, 62%, 11%, 0.5) 160px
            );
    }

    #padding-box {
        background-clip: padding-box;
    }

    #border-box {
        background-clip: border-box;
    }

    #content-box {
        background-clip: content-box;
    }

    #text {
        -webkit-background-clip: text;
        color: transparent;
        border: 5px solid black;
        background-clip: text;
    }

üéØ background-blend-mode √© uma mesclagem dos fundos de um elemento.

    üé® Valores comuns do background-blend-mode:
    | Valor                                      | Efeito de mesclagem                                                |
    | ------------------------------------------ | ------------------------------------------------------------------ |
    | `normal`                                   | Sem mesclagem (padr√£o)                                             |
    | `multiply`                                 | Escurece combinando as cores (como misturar tinta)                 |
    | `screen`                                   | Clareia combinando cores (efeito de brilho)                        |
    | `overlay`                                  | Combina `multiply` e `screen` (realce forte)                       |
    | `darken`                                   | Usa a cor mais escura entre as camadas                             |
    | `lighten`                                  | Usa a cor mais clara entre as camadas                              |
    | `color-dodge`                              | Clareia as cores de base                                           |
    | `color-burn`                               | Escurece com contraste                                             |
    | `difference`                               | Subtrai a cor de fundo da camada de cima                           |
    | `luminosity`, `hue`, `saturation`, `color` | Fazem mesclagens baseadas em propriedades da cor (mais art√≠sticas) |

    .exemplo{
        width: 300px;
        height: 300px;
        border: 15px dashed palegreen;
        color: white;
        padding: 30px;
        font-size: 35px;
        font-weight: 900;
        background-color: orange;
        background-image: url(../img/nave_considero_realista.jpg);
        background-blend-mode: multiply;
    }
*/

/* background

üéØ A propriedade background √© shorthand (abreviada) e aceita m√∫ltiplos valores, mas a ordem importa!

Por isso, √© bom organizar assim:
    background: [color] [image] [position/size] [repeat] [attachment] [origin] [clip];

Exemplo
    .exemplo{
        width: 300px;
    height: 300px;
    border: 15px dashed palegreen;
    color: white;
    padding: 30px;
    font-size: 35px;
    font-weight: 900;
    
    background: 
    url(../img/nave_considero_realista.jpg) -> img
    top center / 200px 200px -> position / size
    no-repeat -> repeat 
    fixed -> attachment 
    padding-box -> origin 
    content-box -> clip 
    red -> color 
    ;
}

üß† Explica√ß√£o dos componentes:
| Parte                                     | O que faz                                                                              |
| ----------------------------------------- | -------------------------------------------------------------------------------------- |
| `url(../img/nave_considero_realista.jpg)` | Define a **imagem de fundo**.                                                          |
| `top center`                              | Alinha a imagem no **topo central** do elemento.                                       |
| `/ 200px 200px`                           | Redimensiona a imagem para **200x200px**.                                              |
| `no-repeat`                               | A imagem **n√£o ser√° repetida**.                                                        |
| `fixed`                                   | A imagem **fica fixa** no viewport (n√£o rola junto com a p√°gina).                      |
| `padding-box`                             | Define que a **origem da imagem** come√ßa no **padding** (`background-origin`).         |
| `content-box`                             | Define at√© onde o fundo √© vis√≠vel: **somente a √°rea de conte√∫do** (`background-clip`). |
| `red`                                     | Define a **cor de fundo padr√£o** do elemento.                                          |

*/

/* border

border-width: 10px; -> define o grosura da borda vc popde coloca a grosura para lados especifico e pode escrever tamb√©m em ingles para determina a grosura como medium
border-style: double; -> define o estilo da borda tem varios n√£o muitos vc pode colocar bolinhas duas linhas quadrados. 
border-color: aqua; -> vc pode definir a cor da borda vc pode colocar uma cor para cada lado.

border: 10px double aqua; -> vc pode definir todas a grosura o tipo e cor da borda nesta mesma sequencia. 

vc pode definir diretamente para qual lado da borda vc quer editar
border-top: ;
border-width: ;
border-bottom: ;
border-left: ;

border-radius: 20px -> ele aredonda as bordas n√£o deixa quadrado.
vc pode deixar ovau usando a barra lateral border-radius: 50px/100px.
border-radius: 50% vc faz uma circulo, s√≥ toma cuidado com a largura e altura para n√£o deforma o circulo. 

*/

/* border-image-source, border-image-slice, border-image-width

 A propriedade **border-image-source** define a imagem ou gradiente que ser√° usada como imagem de borda de um elemento.
 O **border-image-slice** controla como a imagem da borda √© ‚Äúcortada‚Äù (fatiada) para ser distribu√≠da nas partes da borda do elemento.


üéØ border-image-source
    border-image-source: linear-gradient(red, blue) -> vc pode colcar uma cor tamb√©m.
    border-image-source: url(../img/nave.png); -> ele colca em cada canto da borda a imagen que vc selecionar.

üéØ border-image-slice
    Define em quantas partes a imagem ser√° dividida para formar as bordas do elemento.
    A imagem √© dividida como uma grade 3x3:
    ‚ïî‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïó
    ‚ïë 1 ‚ïë  2  ‚ïë 3 ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ï£
    ‚ïë 4 ‚ïë  5  ‚ïë 6 ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ï£
    ‚ïë 7 ‚ïë  8  ‚ïë 9 ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïù

    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë  1  ‚ïë  2  ‚ïë  3  ‚ïë
    ‚ïë‚≠êR ‚ïë ‚≠êY  ‚ïë ‚≠êR ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  4  ‚ïë  5  ‚ïë  6  ‚ïë
    ‚ïë‚≠êY ‚ïë ‚≠êB  ‚ïë ‚≠êY ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  7  ‚ïë  8  ‚ïë  9  ‚ïë
    ‚ïë‚≠êR ‚ïë ‚≠êY  ‚ïë ‚≠êR ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    Vermelho (‚≠êR): nos cantos (1, 3, 7, 9)
    Amarelo (‚≠êY): nas laterais (2, 4, 6, 8)
    Azul (‚≠êB): no centro (5)

    Quando vc usa border-image-slice ele faz um gride que a parte vermelha fica nas pontas amarelo nas lateras e azul no meio.

    ‚úÖ Exemplo:
    .exemplo{
        background-color: black;
        width: 200px;
        height: 200px;
        border: 30px solid;
    }
    
    #exemplo-1{
        border-image-source: url(../img/desenho\ para\ estudo.png);
        border-image-repeat: repeat;
        border-image-slice: 169;
    }

üéØ border-image-width: 10px;

    vc define o tamanho da borda. 
                        top  width  bottom  left
    border-image-width: 10px 20px   30px    40px;

    vc pode definir diretamente para qual lado da borda vc quer editar o tamanha
    border-top: ;
    border-width: ;
    border-bottom: ;
    border-left: ;
*/

/* border-image-repeat, border-image-outset

üéØ border-image-repeat 
    ele controla como a imagem vai se corporrta com a mudana√ßa de tamanho da div dentro da borda. 

    border-image-repeat: repeat; 
        A imagem da borda ser√° repetida quantas vezes for necess√°rio ao longo da borda.
        Se a imagem n√£o couber perfeitamente, ela ser√° cortada no final.
    border-image-repeat: round; 
        A imagem ser√° repetida, mas o navegador ajustar√° levemente o tamanho da imagem 
        para que ela se encaixe perfeitamente na borda, sem cortes.
    border-image-repeat: stretch;
        A imagem ser√° esticada (deformada) para preencher todo o espa√ßo da borda sem repeti√ß√£o. 
    border-image-repeat: space;
       A imagem ser√° repetida, mas n√£o ser√° cortada nem esticada. Se n√£o couber perfeitamente,
        o navegador distribuir√° espa√ßos entre as imagens repetidas para preencher a borda.

    ‚úÖ Definir valores diferentes para cada lado:
    Voc√™ pode definir dois valores: o primeiro vale para horizontal (esquerda e direita) e o segundo para vertical (superior e inferior).
    
        border-image-repeat: repeat space; 

    ‚úÖ Exemplos:
    border-image-repeat: repeat;   repete e corta se sobrar 
    border-image-repeat: round;    repete e ajusta o tamanho da imagem 
    border-image-repeat: stretch;  estica a imagem
    border-image-repeat: space;    repete e adiciona espa√ßos se sobrar espa√ßo

üéØ border-image-outset
    A propriedade border-image-outset define o quanto a imagem da borda deve "sair" 
    para fora da caixa do elemento (ou seja, afastar da borda real do conte√∫do).

    ‚úÖ O que ela faz:
    "Empurra" a imagem da borda para fora do elemento, al√©m da largura normal da borda.
    Isso faz a imagem ocupar mais espa√ßo fora do elemento.

    border-image-outset: 10;

    ‚úÖ Definir valores diferentes para cada lado:
    border-image-outset: 1 2 1 2; Top, Right, Bottom, Left


*/

/* font-family, @font-face, font-weight

‚úÖ  Forma mais simples de definir uma fonte:
        
        font-family: sans-serif;

‚úÖ Usar uma fonte personalizada baixada:
    Quando voc√™ baixa uma fonte (por exemplo, .ttf, .woff, etc.), √© necess√°rio usar 
    @font-face para carreg√°-la:
        @font-face {
        font-family: "Roboto";
        src: url("fonts/Roboto-Regular.ttf"); Caminho para o arquivo
        }
        * {
        font-family: "Roboto";
        }
    
‚úÖ  Retira e colocar em negrito a fonte.
    A propriedade font-weight controla a espessura (peso) da fonte.
        font-weight: normal;   Fonte padr√£o, sem negrito
        font-weight: bold;     Negrito

    Voc√™ tamb√©m pode usar valores num√©ricos para mais controle:
        font-weight: 100;   Bem fina
        font-weight: 400;   Normal 
        font-weight: 700;   Negrito 
        font-weight: 900;   Extra negrito 

*/

/* @import url(), Usar <link> no HTML (head), Melhor estrat√©gia
‚úÖ @import url() ‚Äì Importar fonte do Google Fonts
Voc√™ pode importar fontes diretamente no seu CSS usando @import:

@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap');
*{
    font-family: Roboto;
}

‚úÖ Usar <link> no HTML (head) 
Outra forma de usar Google Fonts √© colocando um <link> dentro da tag <head> do seu HTML:

<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@100..900&display=swap" rel="stylesheet">
Depois, use a fonte no CSS normalmente:
*{
    font-family: Roboto;
        }

‚úÖ Melhor estrat√©gia: usar um global.css
Para manter seu projeto organizado e f√°cil de manter, a melhor pr√°tica √©:
1.Criar um arquivo global.css ou reset.css.
2.Colocar nele as configura√ß√µes globais, como:
Importa√ß√µes de fontes
Cores principais
Reset de margens e paddings
Fontes padr√£o

Exemplo ‚Äì global.css:
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100..900&display=swap');
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Roboto', sans-serif;
}

Depois, no CSS principal:
@import url('./global.css');
Aqui vai o resto do seu estilo

‚úÖ Vantagens:
C√≥digo mais limpo e organizado.
Mais f√°cil de manter e reutilizar.
R√°pido de alterar o visual de todo o site em um √∫nico lugar.

@import url("../assets/global.css");
*/

/* font-size, font-style, font-weight

üéØ font-size: Tamanhos de fonte em CSS

    ‚úÖ Em pixels (valor absoluto)
            #tamanho-px {
                font-size: 20px;
            }

        Define o tamanho da fonte em pixels.
        Valor fixo, independente do tamanho do navegador ou dispositivo.

    ‚úÖ Tamanhos pr√©-definidos (palavras-chave)
            #xx-small {
            font-size: xx-small;
            }
            #x-small {
            font-size: x-small;
            }
            #small {
            font-size: small;
            }
            #medium {
            font-size: medium;
            }
            #large {
            font-size: large;
            }
        Ordem dos tamanhos (do menor para o maior):
            xx-small < x-small < small < medium < large < x-large < xx-large

üéØ font-style ‚Äì Estilo da fonte
    A propriedade font-style define o estilo da letra, como normal, it√°lico ou obl√≠quo.

    ‚úÖ Exemplos:
            #normal{
                font-style: normal;
            }
        Usa a forma padr√£o da fonte (sem inclina√ß√£o).

            #italic{
                font-style: italic;
            }
        Deixa a fonte inclinada, usando uma vers√£o it√°lica real da fonte (se existir).
        
            #oblique{
                font-style: oblique;
            }
        Tamb√©m inclina a fonte, mas de forma artificial (simula um it√°lico).
        Visualmente, parece com italic, mas √© menos refinado.

üéØ font-weight ‚Äì Peso da fonte (negrito)
    Essa propriedade controla se o texto ser√° mais fino, normal ou mais espesso (como o negrito).

    ‚úÖ Exemplos b√°sicos:
            #normal {
            font-weight: normal; ou 400
            }
        Usa o peso padr√£o da fonte, geralmente 400.
            #bold {
            font-weight: bold; ou 700
            }
        Deixa o texto negrito.
    
    ‚úÖ Voc√™ tamb√©m pode usar valores num√©ricos:
        font-weight: 100;   Extra fino
        font-weight: 300;   Fino 
        font-weight: 400;   Normal 
        font-weight: 500;   Um pouco mais grosso 
        font-weight: 700;   Negrito 
        font-weight: 900;   Extra negrito 

*/

/* font-variant , line-height

üéØ font-variant ‚Äì Capitaliza√ß√£o estilizada
    ‚úÖ exemplos:
        #normal {
        font-variant: small-caps;
        font-weight: bold;
        }
    font-variant: small-caps: transforma as letras min√∫sculas em mai√∫sculas pequenas (versaletes), mas mant√©m as letras que j√° estavam em mai√∫sculas com o tamanho normal.
    üí° Dica:
        small-caps √© muito usado em:
            T√≠tulos elegantes
            Cabe√ßalhos de cap√≠tulos
            Subt√≠tulos formais

üéØ line-height

    ele determina o espa√ßamento entre as linhas do texto
    ‚úÖ exemplos:
        p{
            line-height: 1.5;
        }



        */

/* font ‚Äì Propriedade abreviada de fonte
A propriedade abreviada font permite definir v√°rias propriedades de fonte ao mesmo tempo:

‚úÖ Sintaxe completa da propriedade abreviada:
    font: [style] [variant] [weight] [size]/[line-height] [family];

        style: normal, italic, oblique
        variant: normal, small-caps
        weight: normal, bold, 100‚Äì900
        size: obrigat√≥ria (ex: 16px)
        line-height: opcional (ex: /1.5)
        family: obrigat√≥ria (ex: Arial, sans-serif)

‚úÖ Seu primeiro exemplo:
    p {
    font: 20px Arial, sans-serif;
    }
        Aqui voc√™ est√° definindo:
            font-size: 20px
            font-family: Arial, sans-serif
        Os valores que n√£o foram declarados (como font-style, font-weight, etc.) assumem o valor padr√£o: normal.

‚úÖ Seu segundo exemplo:
    h1 {
    font: italic small-caps bold 24px/2 Georgia, serif;
    }
        italic:         estilo da fonte
        small-caps:     versalete (min√∫sculas viram mai√∫sculas pequenas)
        bold:           negrito
        24px:           tamanho da fonte
        /2:             altura da linha (line-height: 2)
        Georgia, serif: fam√≠lia da fonte (com fallback)
    
    üìå Essa linha √© equivalente a escrever:
        h1 {
            font-style: italic;
            font-variant: small-caps;
            font-weight: bold;
            font-size: 24px;
            line-height: 2;
            font-family: Georgia, serif;
        }
‚ö†Ô∏è Aten√ß√£o:
    Os valores obrigat√≥rios s√£o: font-size e font-family.
    Se voc√™ esquecer um deles, o CSS n√£o aplicar√° a regra.


    */

/* text-align, text-decoration, ext-indent, letter-spacing, word-spacing

üéØ text-align ‚Äì Alinhamento do texto
   A propriedade text-align controla como o texto ser√° alinhado horizontalmente dentro de um elemento (como um par√°grafo, div, t√≠tulo, etc.).
    
    text-align: left; Alinha o texto √† esquerda (padr√£o em portugu√™s)
    text-align: right; Alinha o texto √† direita
    text-align: center; Centraliza o texto
    text-align: justify Justifica o texto como em documentos (alinhas as margens esquerda e direita)

    ‚úÖ Exemplo pr√°tico: 
    HTML: 
        <div class="exemplo">
            <p>Esse texto est√° centralizado com text-align: center.</p>
        </div>
    CSS:
        .exemplo{
            width: 370px;
            border: 1px solid black;
        }
        p{
            padding: 10px;
            background-color: lavender;
            text-align: center; -> ele esta alinhado ao centro
        }

üéØ text-decoration

    üéØ text-decoration-line - Onde a linha ser√° aplicada - Ele decide na onde a linha vai ficar.

        text-decoration-line: underline;     Linha abaixo do texto
        text-decoration-line: line-through;  Linha no meio do texto
        text-decoration-line: overline;      Linha acima do texto
        text-decoration-line: none;          Remove qualquer linha

    üéØ text-decoration-style e o estilo da linha se ela vai ser pontinhada ou em ondas.

        text-decoration-style: solid ;   Linha reta e cont√≠nua (padr√£o)
        text-decoration-style: double;   Duas linhas paralelas
        text-decoration-style:dotted;    Linha pontilhada
        text-decoration-style: dashed;   Linha tracejada
        text-decoration-style:wavy;      Linha em ondas

    üéØ text-decoration-color ‚Äì Cor da linha
        Define a cor da linha decorativa, sem afetar a cor do texto:
            text-decoration-color: red;

    üéØ text-decoration-thickness ‚Äì Espessura da linha
        Define a grossura da linha:
            text-decoration-thickness: 1px;

        ‚úÖ Exemplo completo:
            p {
            text-decoration-line: underline;
            text-decoration-style: wavy;
            text-decoration-color: red;
            text-decoration-thickness: 2px;
            }
    
    üéØ text-decoration ‚Äì Forma abreviada (shorthand)
        Voc√™ pode condensar tudo isso em uma √∫nica linha:
            text-decoration: underline solid red 1px; 
        
        Ordem dos valores (recomendada):
            text-decoration: [line] [style] [color] [thickness];

    üí° Dica:
    text-decoration √© muito usado em links, t√≠tulos decorados e efeitos visuais em bot√µes.
    Para remover a linha de um link.

üéØ text-indent vc conseque com ele da um espa√ßamento da borda.

    ‚úÖ Exemplo completo:
        p{
            text-indent: -5px;
        }

üéØ letter-spacing vc conseque colocar um espa√ßamento entre as letras.

    ‚úÖ Exemplo completo:
        p{
            letter-spacing: 10px;
        }

üéØ word-spacing vc conseque colocar um espa√ßamento e cada palavra.

    ‚úÖ Exemplo completo:
        p{
            word-spacing: 10px;
        }


*/

/* white-space, word-wrap, writing-mode, word-break, text-overflow

üéØ white-space ‚Äì Controle da quebra e espa√ßo no texto
    A propriedade white-space define como o navegador lida com espa√ßos em branco, 
    quebras de linha e formata√ß√£o do texto no HTML.
    
    white-space: nowrap;
        ‚ùå N√£o permite quebra de linha ‚Äî todo o conte√∫do fica em uma √∫nica linha, mesmo que ultrapasse a largura do container.
        Usa-se muito em bot√µes, cabe√ßalhos ou labels.

    white-space: pre; 
        ‚úÖ Preserva todos os espa√ßos e quebras de linha exatamente como est√£o no HTML.
        Funciona como a tag <pre> do HTML.
        Ideal para exibir c√≥digo ou textos formatados manualmente.
    
    white-space: pre-line;
        ‚úÖ Preserva quebras de linha do HTML.
        ‚ùå Ignora m√∫ltiplos espa√ßos.
        √ötil para formatar textos com par√°grafos, mantendo quebras.

    white-space: pre-wrap;
        ‚úÖ Preserva todos os espa√ßos e quebras de linha.
        ‚úÖ Permite quebra autom√°tica de linha quando o texto chega ao final do container.
        Muito usado quando voc√™ quer manter a formata√ß√£o, mas ainda assim deixar o texto responsivo.
    
    white-space: break-spaces;
        Igual ao pre-wrap, mas tamb√©m preserva os espa√ßos extras no final da linha.
        Suporte mais recente (funciona em navegadores modernos).
        Ideal para textos com alinhamento ou formata√ß√£o visual especial.
    
üéØ word-wrap (ou overflow-wrap)
    A propriedade word-wrap controla se uma palavra muito longa pode ser quebrada e ir
    para a pr√≥xima linha quando ultrapassar a largura do container.
    
    ‚úÖ Sintaxe:
        word-wrap: normal;       (ou overflow-wrap: normal)
        word-wrap: break-word;   (ou overflow-wrap: break-word)

    ‚úÖ Significado:
üîπ word-wrap: normal;
    O texto n√£o ser√° quebrado no meio de uma palavra.
    Se a palavra for muito longa, ela transborda a caixa.

üîπ word-wrap: break-word;
    Permite quebrar palavras longas automaticamente.
    Evita que a palavra ultrapasse a largura da div.
  
    
üéØ word-break ‚Äì Quebra de palavras
    A propriedade word-break controla a quebra de palavras quando elas atingem o final
    de uma linha.

    ‚úÖ Sintaxe:
        word-break: normal;
        word-break: break-all;
        word-break: keep-all;

    ‚úÖ Explica√ß√£o:
üîπword-break: normal;
    Quebra as linhas apenas entre palavras, de forma natural.
    Palavras longas n√£o s√£o quebradas no meio.

üîπword-break: break-all;
    Permite quebrar em qualquer ponto da palavra, se necess√°rio.
    Muito √∫til para idiomas sem espa√ßamento entre palavras (como chin√™s ou japon√™s), mas tamb√©m usado para ajustar palavras longas em pequenos espa√ßos.

üîπword-break: keep-all;
    Evita a quebra de palavras.
    Funciona principalmente em idiomas asi√°ticos, mantendo as palavras completas.

üéØ writing-mode ‚Äì Define a orienta√ß√£o e o fluxo do texto
    A propriedade writing-mode define a dire√ß√£o na qual o texto √© escrito: horizontal ou 
    vertical, e tamb√©m de onde ele come√ßa.

    ‚úÖ Sintaxe:
        writing-mode: horizontal-tb; padr√£o 
        writing-mode: vertical-rl;
        writing-mode: vertical-lr;

    ‚úÖ Valores mais usados:
        Valor	Descri√ß√£o
        üîπhorizontal-tb	    Horizontal, da esquerda para a direita e de cima para baixo (modo padr√£o em portugu√™s e ingl√™s).
        üîπvertical-rl	    Vertical, de cima para baixo e colunas da direita para a esquerda (comum em japon√™s, chin√™s tradicional).
        üîπvertical-lr	    Vertical, de cima para baixo e colunas da esquerda para a direita (menos comum, mas √∫til em alguns contextos).

üéØ text-overflow 
    A propriedade text-overflow define como o texto que ultrapassa o tamanho da caixa ser√° exibido.
    
    ‚ö†Ô∏è Importante: Para funcionar corretamente, √© obrigat√≥rio usar junto com:
        overflow: hidden;
        white-space: nowrap;

    ‚úÖ Sintaxe:
        text-overflow: clip;
        text-overflow: ellipsis;

    ‚úÖ Valores:
        | Valor      | Descri√ß√£o                                                                           
        | ---------- | ----------------------------------------------------------------------------------- 
        | `clip`     | **Corta** o texto que ultrapassa o limite da caixa **sem adicionar nada** visual.   
        | `ellipsis` | Adiciona **tr√™s pontinhos (...)** no final do texto, indicando que ele foi cortado. 

*/

/* box-shadow, filter: drop-shadow, text-shadow

üéØ box-shadow
    Adiciona sombra ao elemento (como um bloco).
    Essa sombra pode ficar fora ou dentro da caixa (quando com inset).

    ‚úÖ Sintaxe:
        box-shadow: offset-x offset-y blur-radius spread-radius color;
        | Par√¢metro          | Descri√ß√£o                           |
        | ------------------ | ----------------------------------- |
        | `offset-x`         | Deslocamento horizontal da sombra   |
        | `offset-y`         | Deslocamento vertical da sombra     |
        | `blur-radius`      | Suaviza√ß√£o/borr√£o da sombra         |
        | `spread-radius`    | Tamanho da expans√£o da sombra       |
        | `color`            | Cor da sombra                       |
        | `inset` (opcional) | Coloca a sombra **dentro** da caixa |

    ‚úÖ Exemplo:
        box-shadow: 10px 10px 20px -7px red;
        ‚ûï Uma sombra vermelha com deslocamento e suaviza√ß√£o
        ‚ûñ Espalhamento negativo deixa ela mais pr√≥xima do elemento

üéØ filter: drop-shadow
        Adiciona uma sombra em volta do conte√∫do renderizado, como imagens com fundo transparente ou SVGs.
        Diferente do box-shadow, ela segue a forma do conte√∫do, n√£o a da caixa.

    ‚úÖ Exemplo:
        filter: drop-shadow(10px 10px 5px gray);
        ‚ûï Uma sombra cinza deslocada ao redor do conte√∫do.

üéØ text-shadow 
    A propriedade text-shadow adiciona sombras ao redor do texto.

    ‚úÖ Sintaxe:
        text-shadow: offset-x offset-y blur-radius color;
        | Par√¢metro     | Descri√ß√£o                                         |
        | ------------- | ------------------------------------------------- |
        | `offset-x`    | Dist√¢ncia horizontal da sombra (esquerda/direita) |
        | `offset-y`    | Dist√¢ncia vertical da sombra (cima/baixo)         |
        | `blur-radius` | Borr√£o da sombra (mais suave ou mais s√≥lida)      |
        | `color`       | Cor da sombra                                     |

    ‚úÖ Exemplo:
        h2 {
            color: deeppink;
            font-size: 40px;
            text-align: center;
            text-shadow: 10px 10px 5px purple;
        }
        Esse exemplo cria uma sombra roxa deslocada 10px √† direita e 10px para baixo do texto, com um leve borrado de 5px.
    
*/

/* opacity, overflow

üéØ opacity ‚Äì Transpar√™ncia do elemento
    A propriedade opacity controla a transpar√™ncia de um elemento HTML (texto, imagem, caixa, bot√£o etc).
    Opacity vc conseque retira o brinho.

    ‚úÖ Sintaxe:
        opacity: valor;

    O valor vai de 0 at√© 1:
        0 = totalmente transparente (invis√≠vel)
        1 = totalmente opaco (vis√≠vel)
        
        vc conseque coloca de 0.1 ate 0.9 o maximo 1.0.
        Exemplo intermedi√°rio: opacity: 0.5; ‚Üí 50% vis√≠vel

    üß† Dica:
        Se quiser aplicar transpar√™ncia somente no fundo, sem afetar o texto dentro da caixa, use cores com rgba:
            background-color: rgba(0, 0, 0, 0.5); fundo preto com 50% de opacidade
        
        Porque opacity afeta todo o elemento, inclusive o conte√∫do interno dele.

üéØ overflow ‚Äì Controla o conte√∫do que ultrapassa os limites da caixa
    A propriedade overflow determina como o navegador deve tratar o conte√∫do que ultrapassa as dimens√µes do elemento (largura ou altura).

    ‚úÖ Valores poss√≠veis:
        overflow: visible;   (padr√£o) o conte√∫do extra √© exibido fora da caixa
        overflow: hidden;    o conte√∫do extra √© cortado e n√£o aparece
        overflow: scroll;    adiciona barras de rolagem (horizontal e vertical), mesmo que n√£o precise
        overflow: auto;      adiciona barras de rolagem s√≥ se necess√°rio

    ‚úÖ Aplica√ß√µes:
        #hidden {
        overflow: hidden;    corta o conte√∫do que ultrapassar
        }

        #scroll {
        overflow: scroll;    sempre mostra as barras de rolagem
        }

        #auto {
        overflow: auto;      mostra rolagem s√≥ quando necess√°rio
        }

    ‚úÖ Exemplo com rolagem horizontal apenas:
        #exemplo-1 {
        white-space: nowrap;     impede quebra de linha
        overflow-y: hidden;      oculta rolagem vertical
        overflow-x: scroll;      permite rolagem horizontal
        }

*/

/* Unidades de medidas absolutas

üéØ O que s√£o unidades absolutas?

    S√£o unidades fixas, que n√£o mudam conforme o tamanho da tela ou prefer√™ncias do 
    usu√°rio. Ou seja:
        1 cm sempre ser√° 1 cm (independente do dispositivo, em teoria).

    Por isso, s√£o menos recomendadas para layouts responsivos ‚Äî usamos mais as unidades 
    relativas como em, %, rem, vw, etc.

    |   Unidade   |   Nome                    |   Equival√™ncia aproximada          |
    | ----------- | ------------------------- | ---------------------------------- |
    | `cm`        | Cent√≠metro                | 1 cm = 37.8 px                     |
    | `mm`        | Mil√≠metro                 | 1 mm = 3.78 px                     |
    | `Q`         | Quarter-millimeter (¬º mm) | 1 Q = 0.25 mm = 0.945 px           |
    | `in`        | Polegada (inch)           | 1 in = 2.54 cm = 96 px             |
    | `pc`        | Pica                      | 1 pc = 12 pt = 16 px               |
    | `pt`        | Ponto tipogr√°fico (point) | 1 pt = 1/72 in = 1.33 px           |
    | `px`        | Pixel (ponto na tela)     | 1 px = 1/96 in (por padr√£o no CSS) |

üéØ Unidades relativas
    üìè O que s√£o unidades relativas em CSS?

    Unidades relativas s√£o medidas que se adaptam ao contexto onde est√£o sendo usadas.
    Ou seja, elas n√£o t√™m um tamanho fixo ‚Äî seu valor depende de outro elemento, como:
        o elemento pai
        o tamanho da fonte
        ou o tamanho da tela (viewport)

    ‚úÖ Unidades Relativas MAIS USADAS
        | **Unidade** | **Nome**        | **Equival√™ncia aproximada**                            |
        | ----------- | --------------- | ------------------------------------------------------ |
        | `%`         | Porcentagem     | Relativa ao valor do **elemento pai**                  |
        | `em`        | Element         | 1 em = **tamanho da fonte do elemento atual**          |
        | `rem`       | Root Element    | 1 rem = **tamanho da fonte do elemento raiz (`html`)** |
        | `vw`        | Viewport Width  | 1 vw = **1% da largura da viewport**                   |
        | `vh`        | Viewport Height | 1 vh = **1% da altura da viewport**                    |
    
    ‚öôÔ∏è Unidades Relativas MENOS USADAS (mais espec√≠ficas)
        | **Unidade** | **Nome**         | **Equival√™ncia aproximada**                                |
        | ----------- | ---------------- | ---------------------------------------------------------- |
        | `vmin`      | Viewport Minimum | 1 vmin = **1% do menor valor entre `vw` e `vh`**           |
        | `vmax`      | Viewport Maximum | 1 vmax = **1% do maior valor entre `vw` e `vh`**           |
        | `ch`        | Character        | 1 ch = **largura do caractere ‚Äú0‚Äù da fonte atual**         |
        | `ex`        | x-height         | 1 ex = **altura da letra ‚Äúx‚Äù da fonte atual**              |
        | `lh`        | Line Height      | 1 lh = **altura da linha (line-height) do elemento atual** |

    üîç Exemplos r√°pidos:
        | Unidade | Base de refer√™ncia                  | Exemplo                                        |
        | ------- | ----------------------------------- | ---------------------------------------------- |
        | `%`     | Tamanho do elemento **pai**         | `width: 50%` ‚Üí metade da largura do pai        |
        | `em`    | **Fonte do pr√≥prio elemento**       | `padding: 2em` ‚Üí 2√ó o tamanho da pr√≥pria fonte |
        | `rem`   | **Fonte do elemento raiz (`html`)** | `font-size: 1.5rem` ‚Üí 1.5√ó a fonte do `html`   |
        | `vw`    | **Largura da tela (viewport)**      | `width: 100vw` ‚Üí 100% da largura da tela       |
        | `vh`    | **Altura da tela (viewport)**       | `height: 100vh` ‚Üí 100% da altura da tela       |

    ‚úÖ Vantagens:
        Adaptam-se a diferentes telas (celular, tablet, desktop)
        Ajudam na cria√ß√£o de layouts responsivos
        Permitem que usu√°rios ajustem o zoom ou tamanho da fonte sem quebrar o layout

*/

/* calc() 

Uma fun√ß√£o do CSS. Ela permite realizar c√°lculos diretamente dentro das propriedades que aceitam medidas, 
como width, height, margin, padding, font-size e outras.

üõ†Ô∏è O que posso usar dentro de calc()?
Voc√™ pode usar:
    Operadores: +, -, *, /
    Unidades mistas: px, %, em, rem, vh, vw, etc.

    ‚úÖ Exemplo com soma: 
        padding: calc(1rem + 20px);
    ‚úÖ Exemplo com divis√£o:
        width: calc(100vw / 3);

‚ö†Ô∏è Regras importantes:
    Sempre coloque espa√ßos entre os n√∫meros e os operadores:
        
    Correto
        width: calc(100% - 50px);

    Incorreto
        width: calc(100%-50px);


    */

/*------------------------------------ Flexbox -------------------------------------------------------------------*/

/* display, vertical-align, position, z-index: ; 

üéØ A propriedade display no CSS define como um elemento HTML ser√° exibido na p√°gina ‚Äî ou seja, ela controla o comportamento da "caixa" do elemento no layout.

    ‚úÖ display: block; faz o elemento:

        display: block;
            Ocupar toda a largura dispon√≠vel do elemento pai (por padr√£o).
            For√ßar uma quebra de linha antes e depois dele ‚Äî o que gera espa√ßamento 
                autom√°tico em rela√ß√£o ao que vem abaixo (a pr√≥xima div, por exemplo).

    ‚úÖ O que display: inline:

        display: inline;
            Coloca o elemento na mesma linha que os outros (n√£o quebra linha).
            Ignora as propriedades de width e height ‚Äî ou seja, n√£o permite definir largura ou altura diretamente.
            Ocupa apenas o espa√ßo necess√°rio para o conte√∫do (sem ocupar a linha toda).
            Margin e Padding ele s√≥ e aplicado na esquerda e na direita no left e right, O inline bloqueia o top e bottom.

    ‚úÖ O que display: inline-block:

            display: inline-block;
                Coloca o elemento na mesma linha que os outros (n√£o quebra linha).
                Ocupa apenas o espa√ßo necess√°rio para o conte√∫do (sem ocupar a linha toda).
                Ele te permite coloca um width, height, padding, margin normalment. 

    ‚úÖ O que display: none:

        display: none;
            Ele esconde a tag ele n√£o aparece na tela e tudo que esta dentro dele. 
            Remove completamente o elemento do layout da p√°gina.
            O elemento n√£o ocupa espa√ßo nenhum ‚Äî √© como se n√£o existisse.
            Tudo que estiver dentro dele tamb√©m some, inclusive textos, imagens, filhos etc.
            

üéØ vertical-align

    üß© O que √© vertical-align?
        √â uma propriedade CSS usada para alinhar elementos verticalmente em rela√ß√£o √† linha-base de outros elementos.
        Ele funciona em tabelas, e todas as tags inline.

    ‚úÖ Quando usar:
        Em elementos inline, inline-block ou table-cell.
        Para alinhar textos, imagens ou elementos pequenos na mesma linha.
        Para alinhar conte√∫do dentro de uma c√©lula de tabela (<td>).

    üìå Valores comuns:
        | Valor           | Significado                                     |
        | --------------- | ----------------------------------------------- |
        | `baseline`      | Alinha com a linha de base do pai (padr√£o)      |
        | `top`           | Alinha com o topo do elemento pai               |
        | `middle`        | Alinha ao meio (muito usado com imagens)        |
        | `bottom`        | Alinha com a parte inferior                     |
        | `text-top`      | Alinha com o topo da linha de texto do pai      |
        | `text-bottom`   | Alinha com a base da linha de texto do pai      |
        | `sub` / `super` | Subscrito / sobrescrito (como em f√≥rmulas)      |
        | `length` / `%`  | Define um deslocamento espec√≠fico (menos comum) |

üéØ position 

    üß© O que √© position?
        A propriedade position define como um elemento HTML √© posicionado na p√°gina, e se ele ser√° afetado pelo fluxo normal do layout.
        vc conseque selecionar um elemento uma tag e mudar o leiaut, livre mente. 

    ‚úÖ O que faz position: relative;?
        Ela posiciona o elemento em rela√ß√£o √† sua posi√ß√£o original no fluxo da p√°gina.

        üìå Como funciona:
            O elemento continua ocupando o espa√ßo original como se n√£o tivesse sido movido.
            Mas voc√™ pode ajustar sua posi√ß√£o usando top, left, right, bottom.

        üß± Exemplo:
            .caixa {
                position: relative;
                top: 20px;
                left: 30px;
            }
        ‚û°Ô∏è Neste exemplo, a <div class="caixa"> ser√° movida 20px para baixo e 30px para a 
            direita, mas o espa√ßo onde ela estava continua reservado.

        üéØ Quando usar:
            Para ajustar levemente a posi√ß√£o de um elemento sem tir√°-lo do fluxo do layout.
            Para criar um contexto de posicionamento para elementos position: absolute dentro dele.
            
    ‚úÖ O que faz position: absolute;?
        Ela remove o elemento do fluxo normal da p√°gina e o posiciona exatamente onde voc√™ quiser usando top, right, bottom, e left.

        üìå Como funciona:
            O elemento n√£o ocupa espa√ßo na posi√ß√£o original.
            Ele √© posicionado em rela√ß√£o ao ancestral mais pr√≥ximo que tenha position: relative (ou absolute, fixed, sticky).
            Se n√£o houver nenhum ancestral posicionado, ser√° em rela√ß√£o ao <body>.
        
        üß± Exemplo:
            HTML
            <div id="elemento-pai">
                <div id="elemento-filho" class="exemplo"></div>
            </div>

            CSS
            #elemento-pai {
                box-sizing: border-box;
                height: 300px;
                padding: 10px;
                border: 1px solid red;
                position: relative;
            }

            #elemento-filho{
                background-color: palegreen;
                position: absolute;
                top: 0;
                margin: 0;
            }
        ‚û°Ô∏è Neste exemplo o position: absolute; ele vai ficar dentro do position: relative;. 
            Ele n√£o vai para o top da tela.
    
    ‚úÖ position: fixed; ‚Äî Explica√ß√£o Completa e Simples
        A propriedade position: fixed faz com que um elemento fique fixo na tela, mesmo quando o usu√°rio rola a p√°gina para cima ou para baixo.
        
        üìå Caracter√≠sticas:
            O elemento fica preso √† janela do navegador (tamb√©m chamada de viewport).
            Ele n√£o se move junto com o conte√∫do da p√°gina.
            Pode ser colocado em qualquer canto da tela usando top, right, bottom e left.
            
        üß± Exemplo:
            HTML
            <div class="botao-topo">Voltar ao topo</div>

            CSS
            .botao-topo {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 10px 15px;
            background-color: #33A8DB;
            color: white;
            border-radius: 8px;
            }
        ‚û°Ô∏è Esse bot√£o vai ficar sempre no canto inferior direito da tela, mesmo que o usu√°rio role a p√°gina.
        
        üéØ Quando usar:
            Cabe√ßalhos fixos (header)
            Bot√µes de a√ß√£o flutuante (como bot√µes de WhatsApp, voltar ao topo)
            Menus que devem ficar sempre vis√≠veis

    ‚úÖ position: sticky; ‚Äî Explica√ß√£o Simples e Completa
        A propriedade position: sticky faz com que um elemento:
            Se comporte como relative at√© atingir uma posi√ß√£o espec√≠fica na rolagem,
            Depois disso, ele "gruda" naquela posi√ß√£o, como se fosse fixed.
            
        üìå Caracter√≠sticas:
            Funciona dentro do cont√™iner pai.
            Precisa de um valor como top, left, right ou bottom para saber onde vai "grudar".
            Diferente do fixed, ele s√≥ fica fixo enquanto o pai estiver vis√≠vel na tela.
            
        üß± Exemplo:
            HTML 
            <h2 class="titulo">Se√ß√£o</h2>

            CSS
            .titulo {
            position: sticky;
            top: 0;
            background-color: white;
            padding: 10px;
            }
        ‚û°Ô∏è Nesse caso, o t√≠tulo vai rolar normalmente, mas quando ele chegar no topo da tela, 
            ele fica grudado ali, como um t√≠tulo fixo de se√ß√£o.

üéØ z-index: ;
    A propriedade z-index no CSS controla a ordem de empilhamento dos elementos, ou 
    seja, qual elemento fica por cima do outro quando eles se sobrep√µem.
        
    üìå Sintaxe:
        .elemento {
            z-index: 1;
        }

    ‚úÖ Funciona apenas em elementos posicionados:
        O z-index s√≥ funciona se o elemento tiver uma dessas propriedades de position:

            relative
            absolute
            fixed
            sticky

    üìä Como funciona:
        Elementos com z-index maior aparecem por cima dos com z-index menor.
        Se dois elementos t√™m o mesmo z-index, o que aparece por √∫ltimo no HTML fica por cima.

    üìå Exemplo:
        HTML
            <div id="elemento-1" class="exemplo ">Elemento 01</div>
            <div id="elemento-2" class="exemplo ">Elemento 02</div>
            <div id="elemento-3" class="exemplo ">Elemento 03</div>
        CSS
            body {
                font-family: Roboto, sans-sarife;
                height: 200vh;
            }
            .exemplo {
                width: 100px;
                height: 100px;
                margin: 10px;
                padding: 10px;
                border-radius: 4px;
                position: absolute;
            }
            #elemento-1 {
                background-color: orange;
                left: 10px;
                top: 10px;
                z-index: 1;
            }
            #elemento-2 {
                background-color: palevioletred;
                left: 20px;
                top: 20px;
            }
            #elemento-3 {
                background-color: palegreen;
                left: 30px;
                top: 30px;
            }
*/

/* flexbox 


üéØ Flexbox
    üîß Flexbox (Flexible Box Layout)
        Objetivo: Facilitar o alinhamento, distribui√ß√£o de espa√ßo e ordena√ß√£o dos elementos filhos dentro de um cont√™iner.

    üß± Ativado com:
        display: flex;          bloco
        display: inline-flex;   inline

        üîß display: flex
            O elemento pai se comporta como um bloco (block), ou seja:
                Ocupa toda a largura dispon√≠vel
                Quebra a linha por padr√£o
            Usado quando voc√™ quer que o container flex ocupe uma √°rea inteira da tela ou da se√ß√£o.
            
            Exemplo b√°sico:
                <div style="display: flex;">
                    <div>Item 1</div>
                    <div>Item 2</div>
                </div>

        üîß display: inline-flex
            O elemento pai se comporta como um elemento inline, ou seja:
                Fica na mesma linha que outros elementos inline ou inline-block
                S√≥ ocupa o espa√ßo necess√°rio para os filhos
            Ainda assim, os filhos continuam com comportamento flex√≠vel (organizados via Flexbox).

            Exemplo b√°sico:
                <span style="display: inline-flex;">
                <span>Item 1</span>
                <span>Item 2</span>
                </span>

üîπ Propriedades do cont√™iner (pai):
    flex-direction: define a dire√ß√£o (row, column, etc.)
    justify-content: alinha no eixo principal (horizontal por padr√£o)
    align-items: alinha no eixo cruzado (vertical por padr√£o)
    flex-wrap: define se os itens podem quebrar linha

üî∏ Propriedades dos itens (filhos):
    flex-grow: quanto o item pode crescer
    flex-shrink: quanto o item pode encolher
    flex-basis: tamanho inicial
    align-self: sobrescreve align-items no item


*/

/* flex-direction, flex-wrap, flex-flow

üéØ flex-direction:
    Define a dire√ß√£o do eixo principal no cont√™iner flex, ou seja, como os filhos ser√£o posicionados (em linha ou coluna).
    
    ‚úÖ Valores poss√≠veis:
        row (padr√£o):
        ‚ûù Itens em linha, da esquerda para a direita.
        
        row-reverse:
        <- Itens em linha, da direita para a esquerda.

        column:
        ‚¨á Itens em coluna, de cima para baixo.

        column-reverse:
        ‚¨Ü Itens em coluna, de baixo para cima.

    üí° Exemplo:
        .container {
        display: flex;
        flex-direction: column;
        }
    ‚û°Ô∏è Os elementos filhos agora ser√£o empilhados verticalmente.

üéØ flex-wrap:
    A propriedade flex-wrap define se os itens flex√≠veis devem quebrar linha quando n√£o couberem dentro do cont√™iner.

    ‚úÖ Valores:
        nowrap (padr√£o):
        ‚ûù Todos os itens ficam em uma linha s√≥, mesmo que fiquem espremidos.

        wrap:
        ‚ûù Os itens quebram para a pr√≥xima linha quando necess√°rio.

        wrap-reverse:
        <- Igual ao wrap, mas a nova linha aparece acima da anterior (ordem invertida).

    üí° Exemplo:
        .container {
        display: flex;
        flex-wrap: wrap;
        }
    ‚û°Ô∏è Assim, os itens "pulam" para a pr√≥xima linha se n√£o houver espa√ßo suficiente.

üéØ flex-flow
    A propriedade flex-flow √© uma shorthand (atalho) para definir duas propriedades ao mesmo tempo:
        flex-direction ‚Üí dire√ß√£o dos itens
        flex-wrap ‚Üí se os itens quebram linha
        
    üìå Sintaxe: 
        flex-flow: <flex-direction> <flex-wrap>;

    ‚úÖ Exemplo:
        .container {
        display: flex;
        flex-flow: row wrap;
        }
    üëâ Isso equivale a:
        flex-direction: row;
        flex-wrap: wrap;

    üí° Resumo:
        Use flex-flow para escrever de forma mais curta e organizada quando quiser definir dire√ß√£o e quebra de linha juntos.


    */

/* justify-content, align-items, align-content, gap

üéØ A propriedade justify-content no Flexbox (e Grid) alinha os itens no eixo principal (horizontal por padr√£o).
    Use align-items para alinhar os itens "da esquerda para direita" (ou lateralmente, se a dire√ß√£o for linha "row").
    
    üß≠ Usos principais:
        flex-start ‚Üí alinha √† esquerda
        flex-end ‚Üí alinha √† direita
        center ‚Üí centraliza
        space-between ‚Üí espa√ßo entre os itens (sem nas bordas)
        space-around ‚Üí espa√ßo igual ao redor de cada item
        space-evenly ‚Üí espa√ßo totalmente igual entre, antes e depois dos itens

    ‚úÖ Exemplo:
        .container {
        display: flex;
        justify-content: center;
        }

üéØ align-items
    A propriedade align-items alinha os itens no eixo cruzado (perpendicular ao eixo principal), ou seja:
    Use align-items para alinhar os itens "de cima para baixo" (ou lateralmente, se a dire√ß√£o for coluna "column").

    Se flex-direction: row ‚Üí alinha verticalmente
    Se flex-direction: column ‚Üí alinha horizontalmente
    
    üß≠ Valores mais comuns:
        stretch (padr√£o) ‚Üí estica os itens para ocupar todo o espa√ßo dispon√≠vel
        flex-start ‚Üí alinha ao in√≠cio do eixo cruzado
        flex-end ‚Üí alinha ao final
        center ‚Üí centraliza no eixo cruzado
        baseline ‚Üí alinha pela linha de base do texto
        
    ‚úÖ Exemplo:
        .container {
        display: flex;
        align-items: center;
        }

üéØ align-content
    A propriedade align-content √© usada para alinhar m√∫ltiplas linhas de itens no eixo cruzado (vertical por padr√£o).
    Ela s√≥ tem efeito quando h√° mais de uma linha de itens, ou seja, com flex-wrap: wrap ativado.
        
    üß≠ Principais valores:
        stretch (padr√£o) ‚Üí as linhas s√£o esticadas para preencher o espa√ßo dispon√≠vel
        flex-start ‚Üí alinha todas as linhas no topo
        flex-end ‚Üí alinha todas as linhas na parte inferior
        center ‚Üí centraliza verticalmente as linhas
        space-between ‚Üí distribui as linhas com espa√ßo entre elas
        space-around ‚Üí distribui com espa√ßo antes, entre e depois
        space-evenly ‚Üí distribui com espa√ßo igual em todos os lados

    ‚úÖ Exemplo:
        .container {
        display: flex;
        flex-wrap: wrap;
        align-content: center;
        }
    
    üí° Dica:
        Use align-content quando seu container tiver v√°rias linhas de elementos e voc√™ quiser controlar como essas linhas se distribuem verticalmente.
        N√£o confunda com align-items, que alinha os itens dentro de uma √∫nica linha.

üéØ gap
    A propriedade gap define o espa√ßamento entre os itens de um container com 
    display: flex, grid ou inline-flex.

    üìê Sintaxe:
        gap: 20px;          espa√ßamento entre linhas e colunas iguais
        gap: 10px 20px;     primeiro valor: linhas (row), segundo: colunas (column)

    ‚úÖ Exemplo com flex:
        .container {
        display: flex;
        gap: 16px;
        }

    ‚úÖ Exemplo com grid:
        .container {
        display: grid;
        gap: 10px 20px;
        }

    üí° Dica:
        gap substitui a necessidade de usar margin individual nos filhos.
        Funciona em layouts modernos e ajuda a manter espa√ßamentos mais limpos e consistentes.


*/

/* order, flex-grow, flex-shrink, flex-basis

üéØ order
    A propriedade order define a ordem de exibi√ß√£o dos itens filhos dentro de um container 
    flex ou grid.

    üìå Padr√£o:
        Todos os itens t√™m order: 0 por padr√£o.

    ‚úÖ Exemplo:
    HTML
        <div class="container" id="container-01">
            <div class="item item-1">Item 01</div>
            <div class="item item-2">Item 02</div>
            <div class="item item-3">Item 03</div>
        </div>
    CSS
        .item-3{
            order: -1;
        }
        .item-1{
            order: 1;
        }
    ‚û°Ô∏è Explica√ß√£o: O valor order menor aparece antes.
        .item-3 com order: -1 aparece antes de todos.
        .item-2 mant√©m o valor padr√£o order: 0, ficando no meio.
        .item-1 com order: 1 vai para o final.

    üí° Dica:
        √ötil para reorganizar visualmente sem alterar o HTML.
        Valores menores aparecem antes.
        Funciona apenas em elementos diretos de um container flex ou grid.

üéØ flex-grow: ‚Äî Resumo Claro e Direto
    A propriedade flex-grow define quanto um item pode crescer em rela√ß√£o aos outros itens dentro de um container flex√≠vel (display: flex).

    üß± flex-grow
        Faz o item crescer dentro do espa√ßo dispon√≠vel no container display: flex.
        flex-grow: 1; ‚Üí ocupa 1 parte do espa√ßo.
        flex-grow: 2; ‚Üí ocupa 2 partes (o dobro do anterior).

    üìå Exemplo claro:
        Se sobrar 300px de espa√ßo livre:
        item com flex-grow: 1 recebe 100px
        item com flex-grow: 2 recebe 200px

    ‚û°Ô∏è flex-grow ele cresce o tamanho de acordo com o n√∫mero que vc coloca exemplo flex-grow: 1; no item-1 e flex-grow: 2; no item-2 o item dois vai ter, mas espa√ßo que o item 1.

üéØ flex-shrink
    D√° liberdade para o item encolher quando o espa√ßo no container pai n√£o √© suficiente.
    
    üìå Resumo pr√°tico:
        flex-shrink: 1; (padr√£o) ‚Üí o item pode encolher para caber.
        flex-shrink: 0; ‚Üí o item n√£o encolhe, mesmo que falte espa√ßo.
        Valores maiores (como 2, 3) ‚Üí o item encolhe mais r√°pido que os outros.
    
    ‚úÖ Exemplo:
        .item-01 {
        flex-shrink: 1;  Encolhe menos 
        }
        .item-02 {
        flex-shrink: 2;  Encolhe mais 
        }

    üìå Resumo:
        | Item    | `flex-shrink` | Comportamento |
        | ------- | ------------- | ------------- |
        | item-01 | 1             | Encolhe menos |
        | item-02 | 2             | Encolhe mais  |

üéØ flex-basis
    A propriedade flex-basis define o tamanho inicial de um item dentro de um container flex.

    üìå Resumo pr√°tico:
        Define o tamanho inicial do item dentro do container flex.
        Pode ser alterado por flex-grow e flex-shrink.
        Substitui o width quando usado.

    üìå Detalhes importantes:
        Ele n√£o √© fixo, como o width.
        O valor de flex-basis pode ser alterado pelo flex-grow (crescimento) e flex-shrink (encolhimento), dependendo do espa√ßo dispon√≠vel no container.
        Se voc√™ quiser um tamanho fixo de verdade, a√≠ sim voc√™ deve usar width, min-width, max-width, e desabilitar flex-grow e flex-shrink.
        Vc pode usar junto com o min-width, max-width para definir o limite de crescimento e encolhimento. 
    
    üß™ Exemplo r√°pido:
        .item {
            flex-basis: 200px;
        }
*/

/* flex 

üéØ flex: ; ‚Äî Resumo pr√°tico
    A propriedade flex √© um atalho que junta tr√™s propriedades em uma:
        
        flex: <flex-grow> <flex-shrink> <flex-basis>;

    üß™ Exemplo:
        .item {
        flex: 1 1 200px;
        }
    ‚û°Ô∏è Significa:
        flex-grow: 1; ‚Üí pode crescer.
        flex-shrink: 1; ‚Üí pode encolher.
        flex-basis: 200px; ‚Üí come√ßa com 200px.

    ‚úÖ flex: initial;
        √â igual a:
            flex: 0 1 auto;

        Ou seja:
            N√£o cresce (flex-grow: 0)
            Pode encolher (flex-shrink: 1)
            Tamanho base autom√°tico (flex-basis: auto)

        üß† Uso comum: o item mant√©m o tamanho do conte√∫do, mas pode encolher para caber na linha.
    
    ‚úÖ flex: auto;
        √â igual a:
            flex: 1 1 auto;

        Ou seja:
            Pode crescer (flex-grow: 1)
            Pode encolher (flex-shrink: 1)
            Tamanho base autom√°tico (flex-basis: auto)

        üß† Uso comum: o item cresce e encolhe conforme necess√°rio, com base no seu conte√∫do.

    ‚úÖ flex: none; ‚Äî Resumo pr√°tico
    √â o mesmo que:
        flex: 0 0 auto;

    Ou seja:
        ‚ùå N√£o cresce (flex-grow: 0)
        ‚ùå N√£o encolhe (flex-shrink: 0)
        üìê Tamanho fixo baseado no conte√∫do (flex-basis: auto)

    üß† O que isso significa na pr√°tica?
        O item:
            Mant√©m o tamanho natural do conte√∫do
            N√£o se adapta ao espa√ßo dispon√≠vel
            Ignora o tamanho dos outros itens no display: flex

    üìå Quando usar?
        Use flex: none; quando:
            Voc√™ quer que um item tenha tamanho fixo
            Ele n√£o deve crescer nem encolher, mesmo se faltar ou sobrar espa√ßo na linha

*/

/* align-self

‚úÖ align-self ‚Äî Resumo pr√°tico
    A propriedade align-self permite alinhar individualmente um item flex√≠vel no eixo 
    cruzado (vertical, por padr√£o), sobrescrevendo o align-items definido no container.

    üìê Sintaxe:
        .item {
            align-self: auto | flex-start | flex-end | center | baseline | stretch;
        }

    üìå Exemplos de uso:
        .item-1 {
            align-self: flex-start; Alinha no topo
        }
        .item-2 {
            align-self: center;     Alinha no meio vertical
        }
        .item-3 {
            align-self: flex-end;   Alinha embaixo
        }
        .item-4 {
            align-self: baseline;   O item ser√° alinhado pela linha de base do texto com os demais itens no container flex√≠vel.
        }
        .item-5 {
            align-self: stretch;    O item estica para preencher totalmente o eixo cruzado (geralmente o eixo vertical).
        }

*/

/*--------------------------------- Grid ----------------------------------------------------------------------- */

/* Grid

üéØ CSS Grid Layout √© uma forma de organizar os elementos da p√°gina em linhas e colunas. 
    Com ele, voc√™ pode montar layouts mais completos e controlados. Diferente do Flexbox 
    (que organiza em uma linha ou coluna), o Grid organiza em ambas ao mesmo tempo.

‚úÖ Para habilitar o Grid em uma div, usamos:

    display: grid; ‚Üí transforma a div em um container de grade em bloco.
    üîπ Ocupa√ß√£o: toda a largura da linha (como um div padr√£o).

    display: inline-grid; ‚Üí transforma em container de grade inline.
    üîπ Ocupa√ß√£o: apenas o espa√ßo necess√°rio para os itens dentro dela (como um span).

üì¶ Propriedades do Container (display: grid)
    | Propriedade             | Fun√ß√£o                                                           |
    | ----------------------- | ---------------------------------------------------------------- |
    | `display: grid`         | Define que o elemento ser√° um grid container                     |
    | `grid-template-columns` | Define o n√∫mero e tamanho das **colunas**                        |
    | `grid-template-rows`    | Define o n√∫mero e tamanho das **linhas**                         |
    | `grid-template-areas`   | Nomeia √°reas da grade (√∫til para layout sem√¢ntico)               |
    | `column-gap`            | Espa√ßo entre **colunas**                                         |
    | `row-gap`               | Espa√ßo entre **linhas**                                          |
    | `gap`                   | Atalho para `row-gap` e `column-gap`                             |
    | `justify-items`         | Alinha os itens **horizontalmente** nas c√©lulas                  |
    | `align-items`           | Alinha os itens **verticalmente** nas c√©lulas                    |
    | `place-items`           | Atalho para `align-items` e `justify-items`                      |
    | `justify-content`       | Alinha todo o **grid** horizontalmente dentro do container       |
    | `align-content`         | Alinha todo o **grid** verticalmente dentro do container         |
    | `place-content`         | Atalho para `align-content` e `justify-content`                  |
    | `grid-auto-columns`     | Define o tamanho de colunas autom√°ticas                          |
    | `grid-auto-rows`        | Define o tamanho de linhas autom√°ticas                           |
    | `grid-auto-flow`        | Define a dire√ß√£o de preenchimento autom√°tico (row, column, etc.) |

üß© Propriedades dos Itens (filhos do grid)
    | Propriedade         | Fun√ß√£o                                                  |
    | ------------------- | ------------------------------------------------------- |
    | `grid-column`       | Define in√≠cio e fim da **coluna** que o item ocupa      |
    | `grid-column-start` | Define onde come√ßa a coluna                             |
    | `grid-column-end`   | Define onde termina a coluna                            |
    | `grid-row`          | Define in√≠cio e fim da **linha** que o item ocupa       |
    | `grid-row-start`    | Define onde come√ßa a linha                              |
    | `grid-row-end`      | Define onde termina a linha                             |
    | `grid-area`         | Define a √°rea que o item ocupa (por nome ou coordenada) |
    | `justify-self`      | Alinha o item **horizontalmente** na c√©lula             |
    | `align-self`        | Alinha o item **verticalmente** na c√©lula               |
    | `place-self`        | Atalho para `align-self` e `justify-self`               |

*/

/* grid-template-columns, grid-template-rows, repeat, auto-fill, auto-fit

üéØ grid-template-columns
    Define quantas colunas a grade ter√° e qual o tamanho de cada uma.

    üß©Exemplo: 
        .container {
        display: grid;
        grid-template-columns: 100px 1fr 2fr;
    
    ‚û°Cria 3 colunas:
        a 1¬™ com 100px,
        a 2¬™ com 1 parte do espa√ßo restante,
        a 3¬™ com 2 partes do espa√ßo restante.

üéØ grid-template-rows
    Define quantas linhas a grade ter√° e qual o tamanho de cada uma.
    E necesario colocar um tamanho para a altura para funcionar porque ele n√£o conseque encontrar o tamanho.

    üß©Exemplo:
        .container {
        display: grid;
        grid-template-rows: 50px auto 1fr;
        }

    ‚û°Cria 3 linhas:
        a 1¬™ com 50px,
        a 2¬™ com altura autom√°tica conforme o conte√∫do,
        a 3¬™ com 1 parte do espa√ßo restante.

üéØ repeat()
    A fun√ß√£o repeat() evita repeti√ß√£o de valores em grid-template-columns ou grid-template-rows.
    Facilita bastante na hora de colocar as colunas e linhas no seu layout.
    
    üìå Sintaxe:
        repeat(quantidade, tamanho)

    ‚úÖ Exemplo 1:
        grid-template-columns: repeat(3, 1fr);
    
    ‚û° Cria 3 colunas com tamanhos iguais (1fr cada).

    ‚úÖ Exemplo 2:
        grid-template-rows: repeat(2, 100px);
    
    ‚û° Cria 2 linhas com 100px de altura cada.
    
    ‚úÖ Exemplo 3 (com valores mistos):
        grid-template-columns: 100px repeat(2, 1fr) 200px;

    ‚û° Cria 4 colunas:
        1¬™ com 100px
        2¬™ e 3¬™ com 1fr
        4¬™ com 200px
    }

üéØ auto-fill no Grid
    Fun√ß√£o:
        Cria o maior n√∫mero poss√≠vel de colunas (ou linhas) 
         de tamanho fixo (ex: 150px) que couberem dentro do container.

    Mesmo sem conte√∫do:
        Ele mant√©m as "c√©lulas" vazias vis√≠veis ‚Äî o navegador 
         reserva o espa√ßo mesmo que n√£o haja elementos para preencher tudo.

    Como visualizar:
        No DevTools (inspecionar elemento), ative a op√ß√£o "grid" 
         no painel do navegador. Assim, voc√™ ver√° claramente os espa√ßos reservados pelas colunas.

    üìå Exemplo: 
        .container {
            display: grid;
            grid-template-columns: repeat(auto-fill, 150px);
        }

üéØ auto-fit no Grid
    Tamb√©m cria o m√°ximo de colunas, ele n√£o reserva os espa√ßos
     ele preenche os espa√ßos de acordo com a qauntidade do conteudo.

    üìå Exemplo:
        .container {
            display: grid;
            grid-template-columns: repeat(auto-fit, 150px);
        }


*/

/* min-content, max-content, auto

üéØ min-content: O que faz?
    Faz o elemento ficar o menor poss√≠vel sem quebrar palavras.

    Exemplo pr√°tico:
        Um texto dentro de uma <div> vai tentar quebrar linha no menor ponto poss√≠vel, sem fazer palavras quebrarem.
        Ele vai quebra a cada espa√ßo no texto.
    
    width: min-content;
    ‚û° Resultado: o conte√∫do vai "encolher" ao m√°ximo, mas respeitando as quebras naturais das palavras.

üéØ max-content: O que faz?
    Faz o elemento ficar t√£o largo quanto for necess√°rio para o conte√∫do n√£o quebrar nenhuma linha.

    Exemplo pr√°tico:
    Um texto grande vai manter tudo em uma √∫nica linha, aumentando a largura do elemento.

    width: max-content;
    ‚û° Resultado: a largura ser√° t√£o grande quanto o conte√∫do precisar para caber sem quebras.
    
üéØ auto: O que faz?
    Deixa o navegador calcular automaticamente o tamanho com base no conte√∫do, padding, etc.
    Ele vai ser inferior a todos os outros fr, px o valor dele n√£o vai ser respeitado.

    width: auto;
    ‚û° Resultado: o tamanho ser√° o "natural" do conte√∫do, respeitando o contexto (pai, filhos, etc.). √â o valor padr√£o.
*/

/* grid-auto-rows, grid-auto-flows, grid-auto-columns, minmax

üéØ grid-auto-rows
    Define a altura das linhas autom√°ticas (ou seja, as que n√£o foram definidas com grid-template-rows).
    √ötil quando os itens "criam" novas linhas al√©m das previstas.
    E usado quando tem mais conteudo que linhas que vc colocau ele criar mais linha.

    üß© Exemplo:
        grid-auto-rows: 100px;

üéØ grid-auto-columns
    Define a largura das colunas autom√°ticas (as que surgem quando voc√™ posiciona itens em colunas n√£o previstas).
    E usado quando tem mais conteudo que colunas que vc colocau ele criar mais colunas.

    üß© Exemplo:
        grid-auto-columns: 150px;

üéØ grid-auto-flow
    Controla a dire√ß√£o e o comportamento do preenchimento autom√°tico de itens no grid.
    E usado quando tem mais conteudo que linhas e coluna vc conseque deside se que colca uma linha ou coluna com esta tag css.

    üß≠ Valores:
        row (padr√£o) ‚Üí preenche linha por linha.
        column ‚Üí preenche coluna por coluna.
        row dense ou column dense ‚Üí tenta preencher espa√ßos vazios (compacta√ß√£o).

    üß© Exemplo:
        grid-auto-flow: column dense;

üéØ A fun√ß√£o minmax() √© usada no CSS Grid, dentro da propriedade grid-template-columns ou grid-template-rows.
    ‚úÖ Resumo pr√°tico de minmax()
        Ela define um intervalo de tamanho m√≠nimo e m√°ximo para uma faixa do grid.
        
        grid-template-columns: minmax(200px, 1fr);
    ‚û° Nesse exemplo, a coluna ter√° no m√≠nimo 200px e no m√°ximo ocupar√° 1fr (ou seja, uma fra√ß√£o do espa√ßo dispon√≠vel).
    
    üß† Quando usar?
        Quando voc√™ quer que o conte√∫do n√£o fique pequeno demais, mas que ainda cres√ßa dinamicamente quando houver espa√ßo.
        Ideal para layouts responsivos.
    
    üß© exemplo:
        display: grid;
        grid-template-columns: minmax(100px, 100px) minmax(100px, 300px);
    
    ‚û° O que est√° acontecendo aqui?
        Voc√™ est√° criando duas colunas em um grid:

        Primeira coluna ‚Üí minmax(100px, 100px)
        üî∏ Isso √© o mesmo que dizer: fixa em 100px.
        Porque o valor m√≠nimo e m√°ximo s√£o iguais ‚Üí ela nunca vai crescer ou encolher.

        Segunda coluna ‚Üí minmax(100px, 300px)
        üî∏ Ela vai ter no m√≠nimo 100px e pode crescer at√© no m√°ximo 300px, dependendo do espa√ßo dispon√≠vel no container.
*/

/* grid-column-start, grid-column-end, grid-row-start, grid-row-end 

üéØ grid-column-start / grid-column-end
    Define onde o item come√ßa e termina nas colunas.
    Os valores s√£o linhas da grade (grid lines).

    üß© Exemplo:
        .item {
            grid-column-start: 2;
            grid-column-end: 4;
        }
    ‚û°Ô∏è O item vai do in√≠cio da coluna 2 at√© antes da coluna 4, ocupando as colunas 2 e 3.

üéØ grid-row-start / grid-row-end
    Mesma ideia, mas para as linhas.

    üß© Exemplo:
        .item {
            grid-row-start: 1;
            grid-row-end: 3;
        }
    ‚û°Ô∏è O item vai da linha 1 at√© antes da linha 3, ocupando as linhas 1 e 2.

*/

/* grid-column, grid-row, span, grid-area

Atalho para define onde o item come√ßa e termina nas colunas e linhas.

üéØ Atalho: grid-column

    üß© Exemplo:
        .item {
            grid-column: 2 / 4;  start / end
        }
    ‚û°Ô∏è Igual a grid-column-start: 2; grid-column-end: 4;

üéØ Atalho: grid-row

    üß© Exemplo:
        .item {
            grid-row: 1 / 3;
        }
    ‚û°Ô∏è Igual a grid-row-start: 1; grid-row-end: 3;

üéØ Voc√™ tamb√©m pode usar span:
    
    üß© Exemplo:
        .item {
            grid-column: span 2;  ocupa 2 colunas 
        }
        Ou at√© combinar:
            .item {
                grid-column: 2 / span 3;  come√ßa na linha 2 e ocupa 3 colunas 
            }

üéØ grid-area
    A propriedade grid-area define em uma √∫nica linha onde um item come√ßa e termina na grade, tanto em colunas quanto em linhas.

    üìå Sintaxe:
        grid-area: row-start / column-start / row-end / column-end;

        üß© Exemplo pr√°tico:
            .item {
                grid-area: 1 / 2 / 3 / 4;
            }
            ‚û°Ô∏è O item vai:
                Come√ßar na linha 1
                Come√ßar na coluna 2
                Terminar na linha 3
                Terminar na coluna 4

            Ou seja, ocupa da linha 1 √† 2 (porque termina antes da linha 3)
            e da coluna 2 √† 3 (porque termina antes da coluna 4).

        üß© Exemplo de layout 
            mini layout com display: grid usando grid-template-areas e grid-area para organizar os elementos:

            üßæ HTML:
                <div class="grid-container">
                    <header class="item header">Cabe√ßalho</header>
                    <nav class="item menu">Menu</nav>
                    <main class="item conteudo">Conte√∫do</main>
                    <aside class="item lateral">Lateral</aside>
                    <footer class="item rodape">Rodap√©</footer>
                </div>

            üé® CSS:
                .grid-container {
                    display: grid;
                    grid-template-columns: 200px 1fr;
                    grid-template-rows: auto;
                    grid-template-areas:
                        "header  header"
                        "menu    conteudo"
                        "menu    lateral"
                        "rodape  rodape";
                    gap: 10px;
                    padding: 10px;
                }

                .item {
                    padding: 20px;
                    background-color: #e0e0e0;
                    border: 1px solid #999;
                    text-align: center;
                }

                .header   { grid-area: header; }
                .menu     { grid-area: menu; }
                .conteudo { grid-area: conteudo; }
                .lateral  { grid-area: lateral; }
                .rodape   { grid-area: rodape; }

            üñºÔ∏è Resultado visual:
                +-------------------+----------------------+
                |     Cabe√ßalho     |      Cabe√ßalho       |
                +-------------------+----------------------+
                |       Menu        |      Conte√∫do        |
                +-------------------+----------------------+
                |       Menu        |       Lateral        |
                +-------------------+----------------------+
                |      Rodap√©       |       Rodap√©         |
                +-------------------+----------------------+
                
*/

/* grid-template, row-gap, column-gap, gap

üéØ grid-template
    O grid-template √© uma forma encurtada (shorthand) de declarar grid-template-rows, grid-template-columns e grid-template-areas de uma s√≥ vez.

    üìå A sintaxe geral √©:
        grid-template: <linhas> / <colunas>;

        ou, se for usar √°reas nomeadas:
            grid-template:
            "area1 area2" alturaDaLinha1
            "area3 area4" alturaDaLinha2
            / larguraColuna1 larguraColuna2;

    üß© Exemplo 1 ‚Äî apenas linhas e colunas
        .container {
            display: grid;
            grid-template: 100px 200px / 150px 1fr 2fr;
        }
        ‚û°Ô∏è Explica√ß√£o:
            Linhas: 100px e 200px
            Colunas: 150px, 1 fra√ß√£o e 2 fra√ß√µes

    üß© Exemplo 2 ‚Äî usando √°reas nomeadas
        .container {
            display: grid;
            grid-template:
                "header header" 80px
                "sidebar content" 1fr
                "footer footer" 50px
                / 200px 1fr;
        }
        ‚û°Ô∏è Explica√ß√£o:
            Linhas:
                80px para o cabe√ßalho
                1fr para o conte√∫do
                50px para o rodap√©
            Colunas:
                200px para a barra lateral
                1fr para o conte√∫do principal
            √Åreas nomeadas:
                header, sidebar, content, footer
        
üéØ row-gap 
    Define o espa√ßo vertical entre as linhas do grid.
    N√£o cria bordas, apenas espa√ßo entre os elementos.
    
    üß© Exemplo
        .container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            row-gap: 20px; -> 20px de espa√ßo entre as linhas
        }

üéØ column-gap
    Define o espa√ßo horizontal entre as colunas do grid.
    
    üß© Exemplo
        .container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            column-gap: 30px; -> 30px de espa√ßo entre colunas
        }

üéØ Forma abreviada ‚Äî gap
    Voc√™ pode usar gap para definir ambos de uma vez:

    gap: <row-gap> <column-gap>;
        .container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px 30px; -> 20px entre linhas, 30px entre colunas
        }

    Se passar apenas um valor no gap, ele ser√° aplicado para linhas e colunas igualmente:
        .container {
            display: grid;
            gap: 15px; -> 15px em todos os espa√ßamentos   
        }

*/

/* atalho grid, 
    O atalho grid no CSS √© uma forma compacta de definir v√°rias propriedades relacionadas
    ao Grid Layout de uma s√≥ vez, em uma √∫nica linha.

    üì¶ Ele combina propriedades como:
        grid-template-rows
        grid-template-columns
        grid-template-areas
        grid-auto-rows
        grid-auto-columns
        grid-auto-flow

    üìå Sintaxe geral
        grid: <grid-template-rows> / <grid-template-columns>;

        ou, de forma mais completa:
            grid: <grid-template-rows> / <grid-template-columns> <grid-auto-flow> <grid-auto-rows> <grid-auto-columns>;
    
    üß© Exemplo simples
        .container {
            display: grid;
            grid: 100px 200px / 1fr 2fr 1fr;
        }
        ‚û°Ô∏è Significa:
            Linhas: primeira linha com 100px, segunda com 200px.
            Colunas: primeira 1fr, segunda 2fr, terceira 1fr.

    üß© Exemplo com √°reas
        .container {
            display: grid;
            grid:
                "header header" 100px
                "sidebar main"  1fr
                / 200px 1fr;
        }
        ‚û°Ô∏è Significa:
            √Åreas nomeadas: "header", "sidebar", "main".
            Primeira linha: 100px, segunda: 1fr.
            Primeira coluna: 200px, segunda: 1fr.

        */

/* justify-items, align-items, abrevia√ß√£o place-items

üéØ justify-items 
    O justify-items no CSS Grid serve para alinhar o conte√∫do dentro das c√©lulas
    horizontalmente (no eixo inline, ou seja, da esquerda para a direita).

    Aqui est√° uma tabela visual com os valores poss√≠veis e o efeito de cada um:
    | Valor                | Alinhamento horizontal do conte√∫do na c√©lula       | Exemplo visual |
    | -------------------- | -------------------------------------------------- | -------------- |
    | `start`              | Alinha o conte√∫do no **in√≠cio** da c√©lula          | ‚óº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ        |
    | `end`                | Alinha o conte√∫do no **final** da c√©lula           | ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óº        |
    | `center`             | Centraliza o conte√∫do na c√©lula                    | ‚îÄ‚îÄ‚îÄ‚óº‚îÄ‚îÄ‚îÄ        |
    | `stretch` *(padr√£o)* | Faz o conte√∫do ocupar **toda a largura** da c√©lula | ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà         |

üéØ align-items
    O align-items no CSS Grid (e tamb√©m no Flexbox) define como os itens s√£o alinhados 
     verticalmente dentro de suas √°reas de c√©lula em rela√ß√£o ao eixo de bloco 
     (vertical no modo de escrita padr√£o).
 
    Aqui vai uma tabela visual para facilitar:
    | Valor                | Descri√ß√£o                                         | Visualiza√ß√£o |
    | -------------------- | ------------------------------------------------- | ------------ |
    | `start`              | Alinha os itens no **in√≠cio vertical** da c√©lula  | üîºüü¶         |
    | `end`                | Alinha os itens no **final vertical** da c√©lula   | üü¶üîΩ         |
    | `center`             | Centraliza verticalmente                          | üü¶           |
    | `stretch` *(padr√£o)* | Estica o item para ocupar toda a altura da c√©lula | üü¶üü¶üü¶       |

üéØ place-items
    O place-items √© uma forma abreviada (shorthand) para definir 
    align-items e justify-items ao mesmo tempo em um grid ou flex container.

    üìå Sintaxe
        place-items: align-items justify-items;
    
        Primeiro valor ‚Üí align-items (alinhamento no eixo vertical)
        Segundo valor ‚Üí justify-items (alinhamento no eixo horizontal)
        Se colocar apenas um valor, ele ser√° aplicado para os dois.
        
    üì¶ Valores poss√≠veis
    | Valor     | Significado                             |
    | --------- | --------------------------------------- |
    | `start`   | Alinha ao in√≠cio                        |
    | `end`     | Alinha ao final                         |
    | `center`  | Centraliza                              |
    | `stretch` | Ocupa todo o espa√ßo dispon√≠vel (padr√£o) |

    üß© Exemplo Visual
    | CSS                           | Efeito                                       |
    | ----------------------------- | -------------------------------------------- |
    | `place-items: center center;` | Centraliza conte√∫do no meio da c√©lula        |
    | `place-items: start end;`     | Alinha no topo e √† direita                   |
    | `place-items: stretch;`       | Estica tanto vertical quanto horizontalmente |

    üí° Dica:
        Se voc√™ j√° vai usar o mesmo valor para align-items e justify-items, place-items
        deixa o c√≥digo mais limpo:

        .container {
            display: grid;
            place-items: center;
        }
        ‚¨Ü Isso √© o mesmo que:
        align-items: center;
        justify-items: center;

*/

/* justify-content, align-content, abrevia√ß√£o place-content

üéØ justify-content, align-content
    üìå Diferen√ßa principal
        justify-content ‚Üí alinha todo o grid no eixo horizontal (linha X).
        align-content ‚Üí alinha todo o grid no eixo vertical (linha Y).

    ‚ö†Ô∏è Importante: eles funcionam apenas se o container tiver espa√ßo sobrando no eixo correspondente.
        
    | Propriedade / Valor               | Efeito no Grid                                            |
    | --------------------------------- | --------------------------------------------------------- |
    | `justify-content: start;`         | Todo o grid encostado √† esquerda.                         |
    | `justify-content: end;`           | Todo o grid encostado √† direita.                          |
    | `justify-content: center;`        | Grid centralizado horizontalmente.                        |
    | `justify-content: space-between;` | Espa√ßo igual **entre** as colunas, sem margem nas bordas. |
    | `justify-content: space-around;`  | Espa√ßo igual nas bordas e entre colunas.                  |
    | `justify-content: space-evenly;`  | Espa√ßo exatamente igual entre colunas **e** nas bordas.   |

    | Propriedade / Valor             | Efeito no Grid                                           |
    | ------------------------------- | -------------------------------------------------------- |
    | `align-content: start;`         | Todo o grid encostado no topo.                           |
    | `align-content: end;`           | Todo o grid encostado no fundo.                          |
    | `align-content: center;`        | Grid centralizado verticalmente.                         |
    | `align-content: space-between;` | Espa√ßo igual **entre** as linhas, sem margem nas bordas. |
    | `align-content: space-around;`  | Espa√ßo igual nas bordas e entre linhas.                  |
    | `align-content: space-evenly;`  | Espa√ßo exatamente igual entre linhas **e** nas bordas.   |

    üí° Resumo visual r√°pido:
        justify-content  ‚Üí eixo X (esquerda ‚Üî direita)
        align-content    ‚Üí eixo Y (cima ‚Üï baixo)

üéØ place-content
    O place-content √© uma forma abreviada para definir align-content (eixo vertical) e
    justify-content (eixo horizontal) ao mesmo tempo, usado principalmente em Grid
    Layout (e tamb√©m no Flexbox, mas menos comum).

    üìå Sintaxe 
        place-content: <align-content> <justify-content>;

        Se voc√™ informar apenas um valor, ele ser√° aplicado aos dois eixos.
        Se informar dois valores, o primeiro ser√° para o align-content e o segundo para o justify-content.

    üì¶ Valores comuns
        start ‚Üí Agrupa no in√≠cio.
        end ‚Üí Agrupa no final.
        center ‚Üí Centraliza.
        stretch ‚Üí Estica para ocupar todo o espa√ßo.
        space-between ‚Üí Distribui igualmente, sem espa√ßo nas extremidades.
        space-around ‚Üí Distribui igualmente, com espa√ßo nas extremidades.
        space-evenly ‚Üí Espa√ßos iguais entre todos, incluindo extremidades.
    
    üß© Exemplo
        Agrupa no centro vertical e horizontal
            place-content: center;
    üí° Equivalente a:
            align-content: center;
            justify-content: center;

*/

/* justify-self, align-self, abrevia√ß√£o place-self

üéØ O justify-self √© uma propriedade do CSS Grid que controla o alinhamento horizontal
     de um √∫nico item dentro da sua c√©lula de grade.
    
    justify-self ‚Üí controla o alinhamento horizontal (esquerda ‚Üî direita) de um item
     espec√≠fico dentro da sua c√©lula da grade.
    
    üìå Sintaxe:
        justify-self: start | end | center | stretch;
        | Valor     | Efeito                                                              |
        | --------- | ------------------------------------------------------------------- |
        | `start`   | Alinha o item √† **esquerda** da c√©lula.                             |
        | `end`     | Alinha o item √† **direita** da c√©lula.                              |
        | `center`  | Centraliza o item horizontalmente dentro da c√©lula.                 |
        | `stretch` | Faz o item ocupar **toda a largura** dispon√≠vel da c√©lula (padr√£o). |

üéØ O align-self √© parecido com o justify-self, mas em vez de alinhar horizontalmente,
     ele controla o alinhamento vertical de um √∫nico item dentro da c√©lula de um CSS Grid
     ou Flexbox.

    align-self ‚Üí controla o alinhamento vertical (cima ‚Üî baixo) de um item espec√≠fico
     dentro da sua c√©lula da grade.

    üìå Sintaxe:
        align-self: start | end | center | stretch;
        | Valor     | Efeito                                                                     |
        | --------- | -------------------------------------------------------------------------- |
        | `start`   | Alinha o item ao **topo** da c√©lula.                                       |
        | `end`     | Alinha o item √† **parte inferior** da c√©lula.                              |
        | `center`  | Centraliza o item verticalmente dentro da c√©lula.                          |
        | `stretch` | Faz o item ocupar **toda a altura** dispon√≠vel da c√©lula (padr√£o no Grid). |

    üí° Exemplo pr√°tico de align-self e justify-self: 
        body {
            display: grid;
            border: 3px solid;
            height: 80vh;
            grid-template: repeat(3, 1fr) / repeat(3, auto);

            place-items: start;
        } 
        .item-01{
            background: palegoldenrod;
            justify-self: stretch;  => ocupa toda a largura da c√©lula
            align-self: center;     => centraliza verticalmente na c√©lula
        }
        .item-02{
            background: paleturquoise;
            justify-self: end;      => gruda na direita da c√©lula
            align-self: start;      => gruda no topo da c√©lula
        }

    üìå Resumindo:
        justify-self = alinhamento horizontal do item na c√©lula.
        align-self = alinhamento vertical do item na c√©lula.
        Valores comuns: start, end, center, stretch.

üéØ place-self √© um atalho para definir align-self e justify-self ao mesmo tempo em
     um √∫nico elemento no CSS Grid (e tamb√©m funciona no Flexbox).

    üìå Sintaxe 
        place-self: <align-self> <justify-self>;
        
        O primeiro valor define o align-self (alinhamento vertical).
        O segundo valor define o justify-self (alinhamento horizontal).
        Se voc√™ passar apenas um valor, ele ser√° aplicado para os dois.

    üí° Exemplo pr√°tico:
        body {
            display: grid;
            border: 3px solid;
            height: 80vh;
            grid-template: repeat(3, 1fr) / repeat(3, auto);
            place-items: start;
        }
        .item-01{
            background: palegoldenrod;
            place-self: center stretch; => vertical centro, horizontal esticado
        }
        .item-02{
            background: paleturquoise;
            place-self: start end;      => vertical no topo, horizontal √† direita
        }

    üìå Resumindo: 
        .item-01:
            place-self: center stretch ‚Äî verticalmente o item fica centralizado na c√©lula (align-self: center)
            horizontalmente o item ocupa toda a largura da c√©lula (justify-self: stretch)
        .item-02:
            place-self: start end ‚Äî verticalmente fica no topo da c√©lula (align-self: start)
            horizontalmente fica na direita da c√©lula (justify-self: end)
        
        Visual simplificado para .item-01 e .item-02 dentro da c√©lula
        | Item       | Vertical (`align-self`) | Horizontal (`justify-self`) |
        | ---------- | ----------------------- | --------------------------- |
        | `.item-01` | centro                  | esticado (full width)       |
        | `.item-02` | topo                    | final (direita)             |

*/

/*--------------------------------- Responsividade ----------------------------------------------------------------------- */

/* Multicolunas: column-width, column-rule, column-gap
    column-width, column-rule, column-gap

    O column-width ele determina o tamanho da coluna
        Exemplo: column-width: 200px;
    O column-rule ele coloca uma linha entre as colunas
        Exemplo: column-rule: 1px solid gray;
    O column-gap coloca um espa√ßamento entre as colunas
        Exemplo: column-gap: 100px;

    Exemplo:
        body{
            font-family: Arial;
        }

        .container{
            column-width: 200px;
            column-rule: 1px solid gray;
            column-gap: 100px;
        }
*/

/* Layouts flex√≠veis - Flexbox

 CSS
        ------------ Area do Cabe√ßalho ----

        body {
            margin: 0;
            font-family: Arial, sans-serif;
        }

        header {
            background-color: lightblue;
            padding: 60px;
            text-align: center;
        }

        header h2 {
            font-size: 1rem;
            font-weight: normal;
        }

        ------------ Area de texto ---- 

        main {
            padding: 30px;
            text-align: center;
            max-width: 1200px;
            margin: auto;
        }

        h3 {
            text-transform: uppercase;
        }

        .details {
            display: flex;
            gap: 20px;
            margin-bottom: 40px;
        }

        .card {
            background-color: lightblue;
            padding: 16px;
            border-radius: 4px;
        }

        ------------ Area da imagem ---- 

        .image-card{
            background-color: lightblue;
            border: 1px solid #e2e2e2;
            padding: 10px;
            flex-basis: 200px;
        }

        .image-card img{
            width: 100%;
        }

        .gallery{
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            margin-top: 40px;
            gap: 20px;
        }

 HTML
        <header>
            <h1>Layouts flex√≠veis urilizando flex-box </h1>
        </header>

        <main>
            <section>
                <h3>Saiba mais</h3>
                <div class="details">
                    <div class="card">
                        Ao contr√°rio da cren√ßa popular, o Lorem Ipsum n√£o √© simplesmente texto aleat√≥rio. Tem ra√≠zes numa
                        pe√ßa de literatura cl√°ssica em Latim, de 45 AC, tornando-o com mais de 2000 anos. Richard
                        McClintock, um professor de Latim no Col√©gio Hampden-Sydney, na Virg√≠nia, procurou uma das palavras
                        em Latim mais obscuras (consectetur) numa passagem Lorem Ipsum, e atravessando as cidades do mundo
                        na literatura cl√°ssica, descobriu a sua origem.
                    </div>
                    <div class="card">
                        Ao contr√°rio da cren√ßa popular, o Lorem Ipsum n√£o √© simplesmente texto aleat√≥rio. Tem ra√≠zes numa
                        pe√ßa de literatura cl√°ssica em Latim, de 45 AC, tornando-o com mais de 2000 anos. Richard
                        McClintock, um professor de Latim no Col√©gio Hampden-Sydney, na Virg√≠nia, procurou uma das palavras
                        em Latim mais obscuras (consectetur) numa passagem Lorem Ipsum, e atravessando as cidades do mundo
                        na literatura cl√°ssica, descobriu a sua origem.
                    </div>
                    <div class="card">
                        Ao contr√°rio da cren√ßa popular, o Lorem Ipsum n√£o √© simplesmente texto aleat√≥rio. Tem ra√≠zes numa
                        pe√ßa de literatura cl√°ssica em Latim, de 45 AC, tornando-o com mais de 2000 anos. Richard
                        McClintock, um professor de Latim no Col√©gio Hampden-Sydney, na Virg√≠nia, procurou uma das palavras
                        em Latim mais obscuras (consectetur) numa passagem Lorem Ipsum, e atravessando as cidades do mundo
                        na literatura cl√°ssica, descobriu a sua origem.
                    </div>
                </div>
            </section>

            <section>
                <h3>Galeria de imagens</h3>
                <div class="gallery">
                    <div class="image-card">
                        <img src="https://picsum.photos/300/300" alt="Imagem aleat√≥ria">
                    </div>
                    <div class="image-card">
                        <img src="https://picsum.photos/300/300" alt="Imagem aleat√≥ria">
                    </div>
                    <div class="image-card">
                        <img src="https://picsum.photos/300/300" alt="Imagem aleat√≥ria">
                    </div>
                    <div class="image-card">
                        <img src="https://picsum.photos/300/300" alt="Imagem aleat√≥ria">
                    </div>
                    <div class="image-card">
                        <img src="https://picsum.photos/300/300" alt="Imagem aleat√≥ria">
                    </div>
                    <div class="image-card">
                        <img src="https://picsum.photos/300/300" alt="Imagem aleat√≥ria">
                    </div>
                    <div class="image-card">
                        <img src="https://picsum.photos/300/300" alt="Imagem aleat√≥ria">
                    </div>
                    <div class="image-card">
                        <img src="https://picsum.photos/300/300" alt="Imagem aleat√≥ria">
                    </div>
                    <div class="image-card">
                        <img src="https://picsum.photos/300/300" alt="Imagem aleat√≥ria">
                    </div>
                    <div class="image-card">
                        <img src="https://picsum.photos/300/300" alt="Imagem aleat√≥ria">
                    </div>
                </div>  
            </section>
        </main>

*/

/* Layouts flex√≠veis - Grid

CSS

    body{
        margin: 0;
        font-family: Arial;
        font-weight: bold;
        text-align: center;
        display: grid;
        grid-template: 100px repeat(3, 300px) / repeat(4, 1fr);
        grid-template-areas:  
            "header header header header"
            "navbar main-content main-content main-content"
            "navbar content-1 content-2 content-3"
            "navbar footer footer footer"
        ;
    }

    header, nav, section{
        padding: 20px;
    }

    .header{
        grid-area: header;
        background-color: lightblue;
    }

    nav{
        background-color: lightgreen;
        grid-area: navbar;
    }

    ul{
        margin: 0;
        padding: 0;
    }

    li{
        list-style: none;
        margin-bottom: 8px;
    }

    li a{
        color: black;
    }

    .main-section-content{
        background-color: lightsalmon;
        grid-area: main-content;
    }

    .content-1{
        grid-area: content-1;
        background-color: paleturquoise;
    }

    .content-2{
        grid-area: content-2;
        background-color: papayawhip;
    }

    .content-3{
        grid-area: content-3;
        background-color: plum;
    }

    .footer{
        grid-area: footer;
        background-color: lightpink;
    }

HTML

    <header class="header">header</header>
    <nav class="navbar">
        <ul>
            <li><a href="#">Menu 1</a></li>
            <li><a href="#">Menu 2</a></li>
            <li><a href="#">Menu 3</a></li>
            <li><a href="#">Menu 4</a></li>
            <li><a href="#">Menu 5</a></li>
        </ul>
    </nav>
    <section class="main-section-content">main content</section>
    <section class="content-1">content-1</section>
    <section class="content-2">content-2</section>
    <section class="content-3">content-3</section>
    <footer class="footer">footer content</footer>

*/

/* meta tag usado no HTML viewport 

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    üëâ Ela serve para informar ao navegador como deve ajustar a p√°gina em dispositivos 
        m√≥veis (celulares e tablets).

    Explicando cada parte:
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

        name="viewport" ‚Üí define que essa meta tag controla a "janela de visualiza√ß√£o" 
            (viewport).
        width=device-width ‚Üí ajusta a largura da p√°gina para a largura real da tela do 
            dispositivo (sem isso, em celular a p√°gina parece ‚Äúesticada‚Äù como se fosse desktop).
        initial-scale=1.0 ‚Üí define o n√≠vel inicial de zoom (1.0 = sem zoom).

    Sem essa tag:
        Em celulares, sua p√°gina pode ficar muito pequena, e o usu√°rio precisaria dar zoom 
            manual para ler.

    Com essa tag:
        O site j√° se adapta melhor ao tamanho da tela, principalmente se voc√™ usa CSS 
            responsivo (Flexbox, Grid, Media Queries).

    ‚úÖ Principais atributos do viewport:
        width ‚Üí define a largura da viewport.
            valores poss√≠veis:
                device-width ‚Üí largura do dispositivo
                n√∫mero fixo em pixels (ex: width=1024)

        height ‚Üí define a altura da viewport (menos usado).
            valores poss√≠veis:
                device-height
                n√∫mero fixo

        initial-scale ‚Üí n√≠vel inicial de zoom quando a p√°gina carrega.
            exemplo: initial-scale=1.0 (100%), initial-scale=2.0 (200%)

        minimum-scale ‚Üí zoom m√≠nimo que o usu√°rio pode dar.
            exemplo: minimum-scale=0.5

        maximum-scale ‚Üí zoom m√°ximo permitido.
            exemplo: maximum-scale=3.0

        user-scalable ‚Üí permite ou bloqueia o zoom manual do usu√°rio.
            valores: yes (padr√£o) ou no
                exemplo: user-scalable=no (bloqueia pinch-to-zoom)

        viewport-fit ‚Üí usado em dispositivos com notch (como iPhone X+).
            valores:
                auto (padr√£o)
                contain (conte√∫do fica dentro da √°rea segura)
                cover (pode usar a tela inteira, incluindo atr√°s do notch)

*/

/* Media queries @media

A @media √© essencial para design responsivo, permitindo que seu site se adapte a diferentes telas, como celulares, tablets e desktops.

Diferen√ßa entre screen e print no CSS
    No CSS, o @media permite aplicar estilos diferentes dependendo do meio em que a p√°gina √© visualizada.

    screen: refere-se a tela padr√£o que vc colocau o estilo.
    print: refere-se √† impress√£o, e para vc deicha editado para impre√ß√£o dirando coisas desnecess√°rias para impress√£o permintindo 
            ajustar cores, fontes e ocultar elementos desnecess√°rios (como menus e rodap√©s), garantindo que a p√°gina impressa fique organizada e leg√≠vel. 

    Resumo:
    screen ‚Üí estilo para tela.
    print ‚Üí estilo para impress√£o.

    screen vs print (CSS)
    screen ‚Üí estilos aplicados apenas na tela (monitores, celulares, tablets).
    print ‚Üí estilos aplicados apenas na impress√£o, ajustando cores, fontes e escondendo elementos desnecess√°rios.
    Lembre-se: screen √© o que voc√™ v√™, print √© o que sai na impressora.

and e not s√£o operadores l√≥gicos que controlam quando os estilos s√£o aplicados.
    and
        Combina duas ou mais condi√ß√µes.
        A regra s√≥ ser√° aplicada se todas as condi√ß√µes forem verdadeiras.
        Exemplo: 
            @media screen and (min-width: 768px) {
                body {
                    background-color: lightgreen;
                }
            }
        Aqui, o fundo s√≥ ficar√° verde se for tela (screen) e a largura for pelo menos 768px.
        
        Exemplo 2:
            @media screen and (min-width: 768px) and (orientation: landscape) {
                body {
                    background-color: lightgreen;
                }
            }
        O que acontece:
            screen ‚Üí s√≥ vale para visualiza√ß√£o em tela.
            min-width: 768px ‚Üí s√≥ aplica se a tela tiver 768px ou mais de largura.
            orientation: landscape ‚Üí s√≥ aplica se a tela estiver horizontal.
            Resultado: o fundo s√≥ fica verde quando todas as tr√™s condi√ß√µes forem verdadeiras.
    
    not
        Inverte a condi√ß√£o.
        A regra ser√° aplicada quando a condi√ß√£o for falsa.
        Exemplo:
            @media not print {
                body {
                    background-color: lightblue;
                }
            }
        Aqui, o fundo azul vai aparecer em todos os meios que n√£o forem impress√£o.
    
    Resumo simples:
        and ‚Üí todas as condi√ß√µes precisam ser verdadeiras.
        not ‚Üí aplica quando a condi√ß√£o √© falsa.

max-width, min-width -> eles determina a largura maxima e minima da tela para aplicar estilos no layout.
    Exemplo: se a tela tiver at√© 600px de largura, o texto fica menor:
        @media (max-width: 600px) { body { font-size: 14px; } }

max-height, min-height -> eles determina a altura maxima e minima da tela para aplicar estilos no layout.
    Exemplo: se a altura da tela for at√© 500px, o fundo fica azul claro:
        @media (max-height: 500px) { body { background-color: lightblue; } }

orientation -> Aplica estilos dependendo da orienta√ß√£o da tela, que pode ser portrait (vertical) ou landscape (horizontal).
    Exemplo: se o celular estiver horizontal, o fundo fica verde:
        @media (orientation: landscape) { body { background-color: lightgreen; } }

prefers-color-scheme -> Aplica estilos dependendo do tema do usu√°rio (light ou dark)
    Exemplo: se o usu√°rio estiver no tema escuro, o fundo fica preto e o texto branco:
        @media (prefers-color-scheme: dark) { body { background-color: #222; color: #fff; } }

pointer -> Indica a precis√£o do dispositivo de apontamento:
            none ‚Üí sem ponteiro (ex: TV, assistente de voz).
            coarse ‚Üí ponteiro grosseiro (ex: dedo em tela touch).
            fine ‚Üí ponteiro preciso (ex: mouse, trackpad).
    Exemplo: se o usu√°rio estiver em celular (touch), o texto dos bot√µes aumenta:
        @media (pointer: coarse) { button { font-size: 18px; } }

hover -> Aplica estilos se o dispositivo suporta hover, como o mouse.
    Exemplo: se for poss√≠vel passar o mouse sobre um bot√£o, ele muda de cor:
        @media (hover: hover) { button:hover { background-color: yellow; } }


        */

/* Layout Flex√≠vel Mobile
body{
    font-family: Arial, sans-serif;
}
nav ul{
    margin: 0;
    padding: 0;
}
li a{
    text-decoration: none;
    color: black;
    font-weight: bold;
}
nav li {
    background-color: lightgreen;
    padding: 8px;
    border-radius: 4px;
    list-style: none;
}
nav ul{
    display: flex;
    flex-direction: column;
    gap: 4px;
}
#skills{
    background-color: lightgreen;
    border: 1px solid green;
    border-radius: 4px;
}
#skills li{
    list-style: decimal;
}
#education{
    background-color: lightblue;
    border: 1px solid blue;
    border-radius: 4px;
}
main{
    display: flex;
    flex-direction: column;
    gap: 12px;
}
@media screen and (min-width: 720px){
    main{
        flex-direction: row;
        gap: 24px;
        max-width: 1200px;
        margin: 16px auto;
        flex-wrap: wrap;
    }

    #presentation{
        flex-basis: 500px;
    }

    #skills, #education{
        flex: 1;
    }

    nav ul{
        flex-direction: row;
    }

    nav ul li{
        flex: 1;
        text-align: center;
    }
}

HTML 
    <header>
        <nav>
            <ul>
                <li><a href="#">Sobre mim</a></li>
                <li><a href="#">Contato</a></li>
                <li><a href="#">Conhe√ßa meu trabalho</a></li>
                <li><a href="#">Linkedin</a></li>
            </ul>
        </nav>
    </header>
        
    <main>
        <section id="presentation">
            <h1>J√∫lio C√©sar Santos Franco</h1>
            <p>O Lorem Ipsum √© um texto modelo da ind√∫stria tipogr√°fica e de impress√£o. O Lorem Ipsum tem vindo a ser o texto padr√£o usado por estas ind√∫strias desde o ano de 1500, quando uma misturou os caracteres de um texto para criar um esp√©cime de livro.</p>
            <p>O Lorem Ipsum √© um texto modelo da ind√∫stria tipogr√°fica e de impress√£o. O Lorem Ipsum tem vindo a ser o texto padr√£o usado por estas ind√∫strias desde o ano de 1500, quando uma misturou os caracteres de um texto para criar um esp√©cime de livro.</p>
            <p>O Lorem Ipsum √© um texto modelo da ind√∫stria tipogr√°fica e de impress√£o. O Lorem Ipsum tem vindo a ser o texto padr√£o usado por estas ind√∫strias desde o ano de 1500, quando uma misturou os caracteres de um texto para criar um esp√©cime de livro.</p>
            <p>O Lorem Ipsum √© um texto modelo da ind√∫stria tipogr√°fica e de impress√£o. O Lorem Ipsum tem vindo a ser o texto padr√£o usado por estas ind√∫strias desde o ano de 1500, quando uma misturou os caracteres de um texto para criar um esp√©cime de livro.</p>
        </section>
        <section id="skills">
            <ul>
                <li>HTML</li>
                <li>CSS</li>
                <li>javascript</li>
                <li>Python</li>
                <li>C</li>
            </ul>
        </section>
        <section id="education">
            <ul>
                <li>T√©cnico em desenvolvimento de sistema</li>
                <li>Dio.</li>
            </ul>
        </section>
    </main>
*/

/*--------------------------------- Pseudo-elementos ----------------------------------------------------------------------- */

/* ::first-letter, ::first-line, ::backdrop, ::marker

üéØ O ::first-letter √© usado para selecionar e estilizar apenas a primeira letra da primeira 
    linha de um elemento de texto.

    Ele pode ser aplicado de duas formas:
        De maneira espec√≠fica, escolhendo apenas uma tag.
        De maneira global, aplicando a todas as tags de texto.

    üîπ Exemplo 1 ‚Äì Selecionando a letra inicial de uma tag espec√≠fica
            HTML: <p>O aprendizado de pseudo-elementos em CSS √© muito √∫til.</p>
            CSS: p::first-letter { color: red; } 
        
        üëâ Resultado: Somente a letra "O" do par√°grafo ficar√° vermelha.
        
    üîπ Exemplo 2 ‚Äì Selecionando a letra inicial de todas as tags de texto
            HTML: <h2>Pseudo-elemento - <code>::first-letter</code></h2>
                <p>Selecione a primeira letra da primeira linha</p>
                <p>Propriedades disponiveis</p>
            
            CSS: ::first-letter{ color: red; }

        üëâ Resultado: A primeira letra de cada elemento de texto (<h2> e <p>) ficar√° vermelha.
            No <h2>, a letra "P"
            No primeiro <p>, a letra "S"
            No segundo <p>, a letra "P"

    ‚úÖ Resumo r√°pido:
        p::first-letter { ... } ‚Üí estiliza apenas os <p>.
        ::first-letter { ... } ‚Üí estiliza todas as letras iniciais de qualquer elemento textual.

üéØ O ::first-line serve para selecionar e estilizar apenas a primeira linha vis√≠vel de um bloco de texto.
        Primeira linha do texto.

    üîπ Propriedades que funcionam no ::first-line
        Nem todas as propriedades CSS s√£o aceitas.
        As que podem ser aplicadas s√£o basicamente relacionadas a texto, fontes e cor:
            color, background-color
            font, font-size, font-style, font-variant, font-weight
            letter-spacing, word-spacing, line-height
            text-decoration, text-transform, vertical-align
    ‚ö†Ô∏è N√£o d√° para usar coisas como margin, padding, border, float no ::first-line.

    ‚úÖ Resumo r√°pido:
        p::first-line ‚Üí estiliza apenas os <p>.
        ::first-line ‚Üí toda a primeira linha vis√≠vel do texto.

üéØ O ::backdrop √© um pseudo-elemento especial que permite estilizar o fundo (plano 
    de fundo) que aparece atr√°s de um elemento que est√° em modo tela cheia (fullscreen).

    ‚úÖ Resumo r√°pido:
        ::backdrop estiliza o fundo atr√°s de elementos em tela cheia (fullscreen).
        Muito √∫til para criar modais bonitos e acess√≠veis.

    üîπ Exemplo:
        HTML: <video controls> <source src="./video/Video.mp4"> </video>
        CSS: video::backdrop{ 
            background: radial-gradient(circle, blue, black);
            backdrop-filter: blur(5px);
        }
    
    üëâ O que acontece?
        Voc√™ carrega a p√°gina.
        O v√≠deo aparece normalmente.
        Ao clicar no bot√£o "Tela cheia", o v√≠deo entra em fullscreen.
        O fundo atr√°s do v√≠deo fica azul, gra√ßas ao video::backdrop.

üéØ O ::marker serve para estilizar os marcadores de listas (<ul> e <ol>), ou seja, as 
    bolinhas, quadradinhos e n√∫meros que aparecem antes dos itens.

    üîπ O que pode ser estilizado no ::marker?
        Nem todas as propriedades CSS funcionam. As principais permitidas s√£o:
            Cor e tipografia:
                color
                font, font-size, font-weight, font-style, font-variant
            Conte√∫do alternativo:
                content (pode substituir o marcador padr√£o por outro s√≠mbolo ou emoji üéØ)

    ‚úÖ Resumo r√°pido:
        ::marker = estiliza o marcador de <li>.
        Funciona em listas ordenadas (<ol>) e n√£o ordenadas (<ul>).
        Pode mudar cor, fonte e at√© substituir o s√≠mbolo por outro com content.

    üîπ Exemplo: 
        HTML: <ul>
                <li>Color</li>
                <li>content</li>
              </ul>
        CSS: li::marker{
                content: "üî• ";
                color: red;
             }
    üëâ Resultado: Em vez da bolinha padr√£o, cada item da lista ter√° o emoji üî•.

*/

/* ::placeholder, ::selection, ::file-selector-button, ::before e ::after

üéØ O ::placeholder permite estilizar o texto placeholder exibido em campos de formul√°rio (<input> e <textarea>).

    üîπ Exemplo b√°sico
        HMTL: <input type="text" placeholder="Digite seu nome">
        CSS: input::placeholder {
                color: gray;
                font-style: italic;
            }
    üëâ Resultado: O texto "Digite seu nome" ficar√° em cinza e it√°lico.
    
    üîπ O que pode ser estilizado?
        Com ::placeholder voc√™ pode aplicar propriedades de texto e cor, como:
        color
        font-size
        font-style
        font-weight
        letter-spacing
        opacity
    ‚ö†Ô∏è N√£o funciona com propriedades de layout (ex: margin, padding, border).

    ‚úÖ Resumo r√°pido:
        ::placeholder estiliza o texto de dica dentro de <input> e <textarea>.
        Muito usado para acessibilidade e design moderno.

üéØ O ::selection permite estilizar a parte do texto que o usu√°rio seleciona com o mouse ou teclado.

    üîπ O que pode ser estilizado?
        No ::selection, apenas algumas propriedades CSS funcionam:
            Cor de fundo: background-color
            Cor do texto: color
            Efeitos de texto: text-shadow
    ‚ö†Ô∏è N√£o funciona com propriedades como border, margin, padding, display, transform etc.

    ‚úÖ Resumo r√°pido
        ::selection estiliza o texto quando est√° selecionado.
        Funciona em praticamente todos os navegadores modernos.
        √ìtimo para dar um toque personalizado em textos.

    üîπ Exemplo pr√°tico
        HMTL: <h1>Aprendendo pseudo-elementos</h1>
            <p>Selecione este par√°grafo para ver o efeito personalizado.</p>
        CSS: 
            h1::selection {
                background: black;
                color: white;
            }
            p::selection {
                background: lightgreen;
                color: darkgreen;
            }
    üëâ Resultado:
        Se voc√™ selecionar o t√≠tulo, a sele√ß√£o fica branca no fundo preto.
        Se selecionar o par√°grafo, a sele√ß√£o fica verde clara com letras verde-escuras.

    üîπ Exemplo criativo com gradiente
        ::selection {
        background: linear-gradient(to right, purple, pink);
        color: white;
        }
    üëâ Isso deixa a sele√ß√£o com efeito gradiente roxo ‚Üí rosa (embora o suporte a gradiente possa variar entre navegadores).

üéØ O ::file-selector-button permite estilizar diretamente o bot√£o padr√£o que aparece em um campo de upload de arquivo (<input type="file">).

    üîπ O que pode ser estilizado?
        Voc√™ pode usar praticamente qualquer propriedade CSS de bot√£o:
            color, background, border, padding, margin
            font-size, font-weight
            cursor
            border-radius, box-shadow
            transition, animation

    ‚úÖ Resumo r√°pido
        ::file-selector-button ‚Üí estiliza o bot√£o de upload de arquivos.
        Substitui hacks antigos (::-webkit-file-upload-button).
        Funciona nos navegadores modernos.

    üîπ Exemplo b√°sico
        HTML:
            <form action="">
                <label for="fileUpload">Upload de arquivo</label>
                <input type="file">
            </form>
        CSS: 
            input::file-selector-button{
                border: 2px solid darkblue;
                background-color: #6c5ce7;
                color: white;
                padding: 12px;
                border-radius: 4px;
            }
    üëâ O que acontece:
        Borda azul escura: define o contorno do bot√£o.
        Fundo roxo: deixa o bot√£o com cor personalizada.
        Texto branco: facilita a leitura sobre o fundo roxo.
        Padding: aumenta o tamanho interno do bot√£o, deixando-o mais clic√°vel.
        Border-radius: suaviza os cantos do bot√£o.
                
üéØ ::before e ::after
    Esses pseudo-elementos permitem inserir conte√∫do antes ou depois do conte√∫do real de um elemento, sem precisar alterar o HTML.

    ::before ‚Üí insere antes do conte√∫do do elemento.
    ::after ‚Üí insere depois do conte√∫do do elemento.

    Eles sempre precisam da propriedade content, mesmo que seja vazia (""), caso contr√°rio n√£o aparecem.
    
    üîπ Regras importantes
        Sempre precisa de content. Pode ser:
            Texto: "Hello"
            Emoji: "üî•"
            Vazio: "" (para efeitos visuais)
        Pode ser combinado com pseudo-classes (:hover, :focus, :first-child) para criar efeitos interativos.
        Herda o contexto do elemento, mas voc√™ pode usar position, color, font e background para personalizar.

    üîπ Exemplo b√°sico
        HTML: <p>Aprendendo pseudo-elementos em CSS.</p>
        CSS:p::before {
                content: "üëâ ";  insere um emoji antes do par√°grafo
            }
            p::after {
                content: " ‚úî";   insere um check depois do par√°grafo
            }
    Resultado: üëâ Aprendendo pseudo-elementos em CSS. ‚úî

    üîπ Usos comuns
    1. Decora√ß√£o visual
        h2::before {
            content: "‚òÖ ";
            color: gold;
        }
    üëâ Adiciona uma estrela antes do t√≠tulo.

    2. Separadores ou √≠cones
        li::after {
            content: " ‚Ä¢";
            color: gray;
        }
    üëâ Coloca um ponto ap√≥s cada item da lista.

    3. Efeitos de hover ou anima√ß√µes
        button::after {
            content: "";
            display: block;
            width: 0;
            height: 2px;
            background: blue;
            transition: width 0.3s;
        }
        button:hover::after {
            width: 100%;
        }
    üëâ Cria uma linha animada embaixo do bot√£o quando passa o mouse.

    4. Efeitos imge no inicio e no fim
        HMTL: 
            <p>
                <span>Exemplo 1</span>
                <span>Exemplo 2</span>
                <span>Exemplo 3</span>
                <span>Exemplo 4</span>
            </p>
        CSS: 
            p::before{
                content:"üî•" ;
                color: red;
                background-color: burlywood;
            }
            p::after{
                content:"üî•" ;
                color: red;
                background-color: burlywood;
            }
    üëâ O que est√° acontecendo √© o seguinte:
        p::before adiciona o conte√∫do antes do par√°grafo inteiro, e p::after adiciona depois do par√°grafo inteiro.
        Isso n√£o adiciona o emoji antes de cada <span>, apenas uma vez no in√≠cio e uma vez no final do <p>.

    5. Efeitos
        HTML: <div class="card-image" ></div>
        CSS:.card-image{
                position: relative;
                width: 300px;
                height: 300px;
                border: 1px solid gray;
                border-radius: 8px;
                background: url('../img/nave\ que\ eu\ considero\ realista.jpg') no-repeat;
                background-size: cover;
                overflow: hidden;
            }
            .card-image::before{
                content: "";
                position: absolute;
                width: 100%;
                height: 100%;
                background: linear-gradient(transparent, rgb(255, 0 ,140));
            }
    üëâ O pseudo-elemento ::before cria um overlay degrad√™ sobre a imagem, sem precisar de HTML extra, e o card mant√©m o layout e cantos arredondados intactos.
*/

/*--------------------------------- Pseudo Classes ----------------------------------------------------------------------- */

/* :hover, :active
    
üéØ A pseudo-classe :hover √© usada para aplicar estilos a um elemento quando o usu√°rio passa o mouse sobre ele.
    Muito usada em bot√µes, links, imagens, menus etc.
    Funciona em quase todos os elementos HTML.
    Fica ainda melhor com transi√ß√µes (transition) e transforma√ß√µes (transform).
    
    üîπ Exemplo b√°sico com link
        HTML
            <a href="#">Clique aqui</a>
        CSS
            a {
                color: blue;
                text-decoration: none;
            }
            a:hover {
                color: red;
                text-decoration: underline;
            }
        üëâ Quando o mouse passa por cima do link, a cor muda para vermelho e aparece o sublinhado.

    üîπ Exemplo com bot√£o
        HTML
            <button>Enviar</button>
        CSS
            button {
                background: dodgerblue;
                color: white;
                padding: 10px 20px;
                border: none;
                border-radius: 6px;
                cursor: pointer;
            }
            button:hover {
                background: deepskyblue;
                transform: scale(1.05); cresce levemente
            }
        üëâ O bot√£o muda de cor e d√° um pequeno zoom quando passa o mouse.
        
    üîπ Exemplo com imagem
        HMTL
            <img src="foto.jpg" alt="Foto de exemplo" width="200">
        CSS
            img:hover {
                filter: brightness(80%);
                transform: scale(1.1);
                transition: 0.3s ease;
            }
        üëâ Ao passar o mouse, a imagem escurece um pouco e d√° um zoom suave.

üéØ O que √© :active?
    A pseudo-classe :active aplica estilo a um elemento enquanto ele est√° sendo clicado (pressionado com o mouse ou dedo no mobile).
    Funciona muito bem em links, bot√µes e inputs.

    üîπ Exemplo b√°sico com link
        HMTL
            <a href="#">Clique aqui</a>
        CSS
            a {
            color: blue;
            text-decoration: none;
            }
            a:hover {
            color: red;
            }
            a:active {
            color: green;
            }
        üëâ Quando o link √© clicado e segurado, ele muda para verde.

    üîπ Exemplo com bot√£o
        HMTL
            <button>Enviar</button>
        CSS
            button {
                background: dodgerblue;
                color: white;
                padding: 10px 20px;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                transition: transform 0.1s ease;
            }
            button:hover {
                background: deepskyblue;
            }
            button:active {
                background: navy;
                transform: scale(0.95); efeito de "apertar" 
            }
        üëâ Quando o usu√°rio clica e segura, o bot√£o fica mais escuro e parece que foi pressionado.

    üîπ Diferen√ßa entre :hover e :active
        :hover ‚Üí funciona enquanto o mouse est√° sobre o elemento.
        :active ‚Üí funciona apenas durante o clique (pressionar).
                

*/

/* :focus, :focus-within, :focus-visible 

üéØ :focus
    Ativado quando um elemento recebe foco (via clique ou teclado).
    Usado em inputs, bot√µes, links, etc.

    CSS
        input:focus {
            border: 2px solid blue;
            background: #eef;
        }
        üëâ Sempre que o input for selecionado, o estilo ser√° aplicado (independente se foi com mouse ou teclado).

üéØ :focus-within
    Ativado quando o elemento ou qualquer filho dele est√° focado.
    Muito √∫til em formul√°rios e containers.
    
    CSS
        form:focus-within {
            border: 2px solid green;
            padding: 10px;
        }
        üëâ Se voc√™ clicar em um input dentro do form, o form inteiro recebe o estilo.

üéØ :focus-visible
    √â parecido com :focus, mas s√≥ aplica o estilo se o navegador entender que o foco deve ser vis√≠vel.
    Exemplo: quando se navega com TAB no teclado.
    Se voc√™ clicar com o mouse, o estilo pode n√£o aparecer, evitando bordas de foco desnecess√°rias.
        
    CSS
        button:focus-visible {
            outline: 3px solid orange;
        }
    üëâ Melhora acessibilidade, mostrando foco apenas quando realmente faz sentido.

üîπ Diferen√ßa entre :hover, :active e :focus
    :hover ‚Üí enquanto o mouse est√° sobre o elemento.
    :active ‚Üí enquanto o elemento est√° sendo clicado.
    :focus ‚Üí quando o elemento est√° selecionado para intera√ß√£o (via clique ou teclado).

‚ö° Exemplo juntando os tr√™s:
    HTML
        <form>
            <label for="nome">Nome:</label>
            <input type="text" id="nome">
            <button>Enviar</button>
        </form>
    CSS
        input:focus {
            border: 2px solid blue;
        }

        form:focus-within {
            background: #f0f8ff;
        }

        button:focus-visible {
            outline: 3px dashed orange;
        }
    üëâ Se voc√™ clicar no input, ele fica com borda azul.
        O form muda o fundo porque tem um filho focado.
        Se voc√™ navegar at√© o bot√£o com TAB, ele ganha outline laranja.

*/

/* :target, :enabled e :disabled, :link e :visited

üéØ O que √© :target?
    Ele seleciona um elemento que foi ‚Äúalvo‚Äù de um link com √¢ncora (#id).
    Ou seja, quando voc√™ clica em um link que aponta para #algum-id, o elemento com esse id vira o :target.

    üìå Exemplo pr√°tico
        HMTL
            <a href="#sec1">Ir para Se√ß√£o 1</a>
            <a href="#sec2">Ir para Se√ß√£o 2</a>
            <div id="sec1">Se√ß√£o 1</div>
            <div id="sec2">Se√ß√£o 2</div>
        CSS
            #sec1, #sec2 {
                padding: 20px;
                margin: 20px;
                border: 1px solid gray;
            }

            #sec1:target {
                background-color: lightgreen;
            }

            #sec2:target {
                background-color: lightblue;
            }
        üëâ Quando voc√™ clicar em "Ir para Se√ß√£o 1", a Se√ß√£o 1 ganha o estilo do :target.
        üëâ Quando clicar em "Ir para Se√ß√£o 2", a Se√ß√£o 2 vira o alvo.   

üéØ :enabled e :disabled
    üîπ :enabled
    Seleciona um elemento de formul√°rio que est√° habilitado (pode ser clicado ou editado normalmente).
    Exemplo: um <button> sem atributo disabled.

    üîπ :disabled
    Seleciona um elemento de formul√°rio que est√° desabilitado (n√£o pode ser usado porque tem o atributo disabled).

    üìå Exemplo pr√°tico
        HMTL
            <form>
                <button>Enviar (habilitado)</button>
                <button disabled>Enviar (desabilitado)</button>
                
                <input type="text" placeholder="Nome (habilitado)">
                <input type="text" placeholder="Sobrenome (desabilitado)" disabled>
            </form>
        CSS
            button:enabled,
            input:enabled {
                background-color: green;
                color: white;
                cursor: pointer;
            }

            button:disabled,
            input:disabled {
                background-color: gray;
                color: #ccc;
                cursor: not-allowed;
            }
        ‚úÖ Resultado:
        Bot√µes e inputs habilitados ficam verdes.
        Bot√µes e inputs desabilitados ficam cinza.

üéØ :link e :visited
    :link e :visited que s√£o usadas para estilizar links (<a>).
    
    üîπ :link
    Seleciona links que ainda n√£o foram visitados (ou seja, que o usu√°rio nunca clicou).
    S√≥ funciona em elementos <a> com atributo href.

    üîπ :visited
    Seleciona links que j√° foram visitados (o usu√°rio clicou e j√° acessou aquela p√°gina anteriormente).
    Tamb√©m s√≥ funciona em <a href="...">.

    üìå Exemplo pr√°tico
        HTML
            <a href="https://www.google.com">Google</a>
            <a href="https://www.youtube.com">YouTube</a>
            <a href="https://www.wikipedia.org">Wikipedia</a>

        CSS 
            Links ainda n√£o visitados
                a:link {
                    color: blue;
                    text-decoration: none;
                }

            Links j√° visitados
                a:visited {
                    color: purple;
                }

            Efeitos extras
                a:hover {
                    color: red;
                    text-decoration: underline;
                }

            a:active {
                color: orange;
            }

        ‚úÖ Funcionamento:
            Antes de visitar ‚Üí o link aparece azul.
            Depois de visitar ‚Üí muda para roxo.
            Quando passa o mouse (:hover) ‚Üí fica vermelho.
            Quando clica e segura (:active) ‚Üí fica laranja.
*/

/* :placeholder-shown, Checked e Indeterminate, 

üéØ O que √© :placeholder-shown?
    √â uma pseudo-classe CSS que seleciona um campo de formul√°rio (<input> ou <textarea>) quando o texto do placeholder est√° vis√≠vel, ou seja:
        O campo est√° vazio
        O atributo placeholder existe
    Assim que o usu√°rio digita algo, o placeholder desaparece e a pseudo-classe deixa de ser aplicada.
    
    üìå Exemplo pr√°tico
        HTML
            <form>
                <input type="text" placeholder="Digite seu nome">
                <input type="email" placeholder="Digite seu e-mail">
            </form>
        CSS
            Enquanto o placeholder estiver sendo exibido
                input:placeholder-shown {
                    border: 2px dashed gray;
                    background-color: #f9f9f9;
                }

            Quando o usu√°rio digitar algo
                input:not(:placeholder-shown) {
                    border: 2px solid green;
                    background-color: #eaffea;
                }
            ‚úÖ Funcionamento:
            Antes de digitar ‚Üí o campo fica com borda cinza tracejada.
            Depois de digitar ‚Üí o estilo muda para borda verde.

üéØ Checked e Indeterminate
    üîπ :checked
        Usada para selecionar elementos de formul√°rio marcados, como:
            checkbox marcado ‚úÖ
            radio button selecionado üîò
            option em <select> selecionado

        üìå Exemplo:
            HTML
                <form>
                    <label>
                        <input type="checkbox" checked> Aceito os termos
                    </label>

                    <label>
                        <input type="radio" name="opcao" checked> Op√ß√£o A
                    </label>
                    <label>
                        <input type="radio" name="opcao"> Op√ß√£o B
                    </label>
                </form>
            CSS
                input:checked {
                    outline: 2px solid green;
                    background-color: lightgreen;
                }
            ‚úÖ Aqui, qualquer checkbox ou radio marcado ganhar√° borda verde.

    üîπ :indeterminate
        Seleciona checkboxes que est√£o em estado intermedi√°rio (nem marcado, nem desmarcado).
        Esse estado n√£o pode ser definido direto no HTML ‚Äî precisa ser configurado via JavaScript.

        üìå Exemplo:
            HMTL
                <form>
                    <label>
                        <input type="checkbox" id="pai"> Selecionar todos
                    </label>
                    <br>
                    <label>
                        <input type="checkbox" class="filho"> Item 1
                    </label>
                    <label>
                        <input type="checkbox" class="filho"> Item 2
                    </label>
                </form>
            CSS
                input:indeterminate {
                    outline: 2px solid orange;
                    background-color: #fff3cd;
                }
            JAVASCRIPT
                const pai = document.getElementById("pai");
                pai.indeterminate = true; // for√ßa estado "indefinido"
            
                üëâ O estado indeterminate √© muito usado em checkboxes de "Selecionar todos":
                    Se todos os itens filhos est√£o marcados ‚Üí checkbox pai fica checked.
                    Se nenhum est√° marcado ‚Üí fica desmarcado.
                    Se alguns est√£o marcados ‚Üí fica indeterminate.

    ‚ö° Resumindo:
    :checked ‚Üí quando o elemento est√° selecionado/marcado.
    :indeterminate ‚Üí quando o elemento est√° em estado intermedi√°rio (definido via JS).
*/

/* :valid e :invalid, :in-range e :out-of-range

üéØ :valid e :invalid
    Elas validam os inputs de acordo com os atributos HTML5 (required, pattern, type, min, max, etc.).

    üìå Exemplo:
        HTML
            <form>
                <label for="">Digite seu E-mail</label>
                <input type="email" placeholder="Digite seu email" required>
            
                <label for="">Somente letras</label>
                <input type="text" pattern="[A-Za-z]+" placeholder="Somente letras" required>
            </form>
        CSS
            input[type="email"]:valid {
                border: 2px solid green;
                background-color: #e6ffe6;
            }
            input[type="email"]:invalid {
                border: 2px solid red;
                background-color: #ffe6e6;
            }

            input[type="text"]:valid {
                border: 2px solid green;
                background-color: #e6ffe6;
            }
            input[type="text"]:invalid {
                border: 2px solid red;
                background-color: #ffe6e6;
            }
        ‚úÖ Se o usu√°rio digitar um email v√°lido, fica verde.
        ‚ùå Se for inv√°lido (ex: "abc123"), fica vermelho.

üéØ :in-range e :out-of-range
    Funcionam em inputs num√©ricos (number, range, date, etc.) que t√™m min e max.

    üìå Exemplo:
        HTML
            <form>
                <label>Idade (18 a 60):</label>
                <input type="number" min="18" max="60" required>
            </form>
        CSS
            input:in-range {
                border: 2px solid green;
                background-color: #f0fff0;
            }
            input:out-of-range {
                border: 2px solid orange;
                background-color: #fff0e6;
            }
        ‚úÖ Se digitar 25, o input ficar√° verde (dentro da faixa).
        ‚ö†Ô∏è Se digitar 10 ou 70, ficar√° laranja (fora da faixa).

üìå Exemplo:
    HMTL
        <form action="">
            <h3>Fa√ßa sua compra</h3>
            <label for="email" required>E-mail:</label>
            <input type="email" name="email">
            <span class="error">E-mail inv√°lido</span>

            <label for="codigo-produto">C√≥digo Produto:</label>
            <input 
                type="number" 
                name="codigo-produto" 
                min="1000"
            >
            <span class="error">C√≥digo Produto inv√°lido</span>

            <label for="cupom">Cupom de Desconto:</label>
            <input 
                type="cupom"
                type="text" 
                pattern="[a-z]+"
                placeholder="Apenas letras min√∫sculas"
            >
            <span class="error">Cupom de Desconto inv√°lido</span>

            <label for="data-nascimento">Data de nascimento</label>
            <input 
                type="date" 
                name="data-nascimento"
                min="2002-01-07"
                max="2025-08-24"
            >
            <span class="error">Data de nascimento inv√°lida</span>

            <label for="quantidade">Quantidade</label>
            <input 
                type="number" 
                name="amount"
                min="3"
                max="10"
            >
            <span class="error">Quantidade inv√°lida</span>

            <label>
                <input type="checkbox" required>
                <span>Li e aceito os termos de uso</span>
            </label>

            <button type="submit">Compras</button>
        </form>
    CSS
        form label,
        form button {
            display: block;
            margin-top: 12px;
        }

        input {
            padding: 4px 14px;
            margin-top: 8px;
        }

        form {
            border: 1px solid grey;
            border-radius: 4px;
            width: 300px;
            padding: 40px;
            margin: auto;
            background-color: rgb(247, 247, 247);
        }

        form h3 {
            margin: 0;
        }

        input:valid,
        input:in-range {
            border: 1px solid rgb(28, 168, 28);
            color: rgb(28, 168, 28);
        }

        input:invalid,
        input:out-of-range {
            border: 1px solid orangered;
            color: orangered;
        }

        input:valid+span {
            color: green;
        }

        input:invalid+span {
            color: red;
        }

        .error {
            color: orangered;
            font-size: 0.75rem;
            display: none;
            margin-top: 4px;
        }

        input:invalid+.error {
            display: block;
        }
    Campos obrigat√≥rios (required).
    Valida√ß√£o autom√°tica de email, n√∫meros, faixa (min/max) e regex (pattern).
    Mensagens de erro s√≥ aparecem quando o campo √© inv√°lido.


*/

/* :required e :optional, :autofill, :root

üéØ :required ‚Üí seleciona os campos que t√™m o atributo required.
    Exemplo: destacar os obrigat√≥rios.
        input:required{
            border-color: purple;
        }

üéØ :optional ‚Üí seleciona os campos que n√£o t√™m o atributo required.
    Exemplo: destacar os opcionais.
        input:optional{
            border-color: palevioletred;
        }
    
    üëâ Assim voc√™ consegue diferenciar quais inputs o usu√°rio precisa preencher obrigatoriamente e quais s√£o opcionais.

üéØ O :autofill √© uma pseudo-classe usada para estilizar campos de formul√°rio que foram preenchidos automaticamente pelo navegador (ex: sugest√µes salvas de e-mail, nome, senha, etc).
    üîπ Exemplo:
        input:autofill {
            border: 2px solid green;
            background-color: #eaffea;
            color: #222;
        }
    ‚ö†Ô∏è Mas cuidado:
        Nem todos os navegadores suportam da mesma forma.
        No Chrome/Safari geralmente se usa com prefixo:

        input:-webkit-autofill {
            border: 2px solid green;
            background-color: #eaffea;
        }
    üëâ Isso √© √∫til quando voc√™ quer evitar aquele amarelo ‚Äúpadr√£o do Chrome‚Äù ou personalizar a apar√™ncia quando o campo √© preenchido automaticamente.

üéØ O :root √© uma pseudo-classe em CSS que representa o elemento raiz do documento.
    No HTML, esse elemento √© o <html>.

    üîπ Exemplo:
        :root {
            --cor-principal: #0077ff;
            --cor-secundaria: #ff0066;
            --espacamento: 16px;
        }
        body {
            background-color: var(--cor-principal);
            color: white;
            padding: var(--espacamento);
        }
        h1 {
            color: var(--cor-secundaria);
        }
        Nesse caso:
            :root declara vari√°veis globais.
            var(--nome-da-variavel) usa a vari√°vel.

    ‚ö° Resumindo:
        :root = <html> no CSS.
        √â perfeito para definir vari√°veis globais reutiliz√°veis.


*/

/* :nth-child e nth-of-type

üéØ :nth-child(n)
    Seleciona o n-√©simo filho de qualquer tipo dentro de um elemento pai.
    Conta todos os filhos, independente da tag.
    Pode usar n√∫meros exatos (:nth-child(3) ‚Üí 3¬∫ filho), palavras-chave (odd ‚Üí filhos √≠mpares, even ‚Üí filhos pares) ou f√≥rmulas (3n+1 ‚Üí 1¬∫, 4¬∫, 7¬∫‚Ä¶).

    Exemplo:
        li:nth-child(2) { color: red; }
    Isso aplica no 2¬∫ filho do pai, seja ele <li>, <p>, <span>, etc.

üéØ :nth-of-type(n)
    Seleciona o n-√©simo filho de um tipo espec√≠fico (uma tag) dentro do pai.
    Conta apenas os elementos do mesmo tipo, ignorando os outros.
    Pode usar n√∫meros, odd, even ou f√≥rmulas como em :nth-child.
        
    Exemplo:
        li:nth-of-type(2) { color: blue; }
    Isso aplica no 2¬∫ <li> dentro do pai, mesmo que existam outros elementos entre eles.

üîπ Diferen√ßa principal
    :nth-child(n) conta todos os filhos, independente da tag.
    :nth-of-type(n) conta somente filhos do mesmo tipo.

üîπ Sintaxe b√°sica de
        :nth-child(an+b)
    a ‚Üí define o passo (quantos elementos pular)
    b ‚Üí define o deslocamento inicial (onde come√ßar)

    Exemplo com 3n+1
        HTML
            <ul id="lista-1">
                <li>Item 01</li>
                <li>Item 02</li>
                <li>Item 03</li>
                <li>Item 04</li>
                <li>Item 05</li>
                <li>Item 06</li>
                <li>Item 07</li>
            </ul>
        CSS
            li:nth-child(3n+1){
                color: red;
            }
    ‚úÖ Resultado:
        n=0 ‚Üí 3*0+1 = 1 ‚Üí Item 1
        n=1 ‚Üí 3*1+1 = 4 ‚Üí Item 4
        n=2 ‚Üí 3*2+1 = 7 ‚Üí Item 7
        Ou seja, aplica nos itens 1, 4, 7‚Ä¶
*/

/* :first-of-type e :last-of-type, 

üéØ :first-of-type
    Seleciona o primeiro elemento de um tipo espec√≠fico dentro do elemento pai.

    Exemplo:
        p:first-of-type {
            color: red;
        }
    Se dentro de uma <div> voc√™ tiver v√°rios <p>, apenas o primeiro <p> ser√° estilizado, mesmo que tenha outros elementos antes dele.

üéØ :last-of-type
    Seleciona o √∫ltimo elemento de um tipo espec√≠fico dentro do pai.

    Exemplo:
        p:last-of-type {
            color: blue;
        }
    Isso aplica somente no √∫ltimo <p>, mesmo que tenha outros elementos diferentes depois dele.

üîπ Exemplo pr√°tico
    <div>
        <h2>T√≠tulo</h2>
        <p>Primeiro par√°grafo</p>
        <p>Segundo par√°grafo</p>
        <span>Um span</span>
        <p>√öltimo par√°grafo</p>
    </div>
    p:first-of-type ‚Üí "Primeiro par√°grafo"
    p:last-of-type ‚Üí "√öltimo par√°grafo"
*/

/* :nth-last-child() e :nth-last-of-type() 

üéØ :nth-last-child()
    Conta os filhos de tr√°s para frente, sem se importar com a tag.
    Funciona como :nth-child(), mas contando de tr√°s para frente.
        Exemplo:
            p:nth-last-child(1) {
                color: red;
            }
        Isso pinta de vermelho o √∫ltimo filho do pai, mas s√≥ se ele for um <p>.

üéØ :nth-last-of-type()
    Conta os filhos de tr√°s para frente, mas considera s√≥ o tipo da tag.
    Funciona como :nth-of-type(), mas contando de tr√°s para frente.
        Exemplo:
            p:nth-last-of-type(1) {
                color: blue;
            }
        Isso pinta de azul o √∫ltimo <p>, mesmo que ele n√£o seja o √∫ltimo filho do pai (pode ter outros elementos depois).

üîπ Resumindo a diferen√ßa
    :nth-last-child() ‚Üí conta todos os filhos do pai (independente da tag).
    :nth-last-of-type() ‚Üí conta s√≥ os filhos do mesmo tipo de elemento.

*/

/* :only-child e :only-of-type

üéØ O seletor :only-child √© bem direto:
    Ele seleciona um elemento que √© filho √∫nico do pai.
    Ou seja, o pai s√≥ pode ter esse filho e mais nenhum outro.
    Exemplo: 
        HTML
            <div>
                <p>Sou filho √∫nico</p>
            </div>

            <div>
                <p>Eu n√£o sou √∫nico</p>
                <span>Irm√£o</span>
            </div>
        CSS
            p:only-child {
                color: red;
            }
    üëâ Nesse caso:
        O primeiro <p> fica vermelho (√© filho √∫nico do <div>).
        O segundo <p> n√£o fica vermelho (porque o <div> tem um <span> tamb√©m).

üîπ Diferen√ßa entre :only-child e :only-of-type
    :only-child ‚Üí seleciona o elemento se ele for o √∫nico filho do pai (n√£o pode ter mais ningu√©m junto).
    :only-of-type ‚Üí seleciona o elemento se ele for o √∫nico daquele tipo dentro do pai, mesmo que existam outros elementos de tipos diferentes.

üéØ :only-of-type seleciona o elemento se ele for o √∫nico daquele tipo dentro do pai, mesmo que existam outros elementos de tipos diferentes.
    Exemplo pr√°tico:
    HTML:
        <div>
            <p>Sou o √∫nico par√°grafo aqui</p>
            <span>Tenho um irm√£o diferente</span>
        </div>

        <div>
            <p>Primeiro par√°grafo</p>
            <p>Segundo par√°grafo</p>
        </div>
    CSS
        p:only-child {
            color: red;
        }

        p:only-of-type {
            background: yellow;
        }
    üëâ Resultado:
        O primeiro <p> n√£o recebe vermelho (porque n√£o √© filho √∫nico, tem o <span>),
        Mas ele recebe fundo amarelo porque √© o √∫nico <p> dentro daquele <div>.
        No segundo <div>, nenhum <p> √© estilizado, porque existem dois <p> do mesmo tipo.

‚ö° Em resumo:
    :only-child ‚Üí n√£o pode ter nenhum irm√£o.
    :only-of-type ‚Üí pode ter irm√£os, mas n√£o do mesmo tipo de tag.


*/

/* :empty, :is(), :where()

üéØ O que √© :empty
    O seletor :empty seleciona um elemento que n√£o tem nenhum conte√∫do dentro ‚Äì ou seja:
        N√£o pode ter texto (nem mesmo espa√ßo em branco).
        N√£o pode ter filhos (outras tags).
    Se tiver qualquer coisa, mesmo um simples espa√ßo, j√° deixa de ser :empty.

    Exemplo: 
        HTML
            <div class="caixa-vazia"></div>
            <div class="caixa-com-texto">Ol√°</div>
            <div class="caixa-com-filho"><span>Filho</span></div>

        CSS
            div:empty {
            background: lightblue;
            border: 2px dashed blue;
            }
    üëâ Resultado:
        S√≥ o primeiro <div> (caixa-vazia) ser√° selecionado, porque n√£o tem nada dentro.
        O segundo e terceiro n√£o contam como :empty, pois t√™m texto ou elementos filhos.
        
    ‚ö° Resumindo:
        :empty = elemento vazio de verdade ‚Üí sem texto, sem espa√ßos, sem filhos.

üéØ O que √© :is()
    O :is() serve para agrupar seletores e deixar o c√≥digo mais limpo e f√°cil de manter.
    Ele aceita uma lista de seletores dentro dos par√™nteses e aplica o mesmo estilo a todos.
        
    Exemplo b√°sico
        :is(h1, h2, h3) {
            color: blue;
        }
    üëâ Isso √© igual a escrever:
        h1, h2, h3 {
            color: blue;
        }
    Ou seja, todos os t√≠tulos <h1>, <h2> e <h3> ficar√£o azuis.
    
    üîπ Exemplo pr√°tico
        HTML
            <p>Par√°grafo normal</p>
            <p class="destaque">Par√°grafo destaque</p>
            <div>Um div</div>
        CSS
            :is(p.destaque, div) {
            background: yellow;
            }
    üëâ Aqui:
        O <p class="destaque"> vai ficar amarelo.
        O <div> tamb√©m vai ficar amarelo.

    ‚ö° Resumindo:
        :is() = forma curta de agrupar seletores.
        Torna o c√≥digo mais limpo e reduz repeti√ß√£o.
        Funciona at√© no meio de seletores mais complexos.

üéØ O que √© :where()
    O :where() funciona igual ao :is(), ou seja, serve para agrupar seletores e aplicar o mesmo estilo.

    A diferen√ßa √©:
        üëâ :where() sempre tem especificidade 0 (√© como se fosse muito fraco na hierarquia do CSS).
        üëâ J√° o :is() herda a especificidade do seletor mais forte dentro dele.

    Exemplo b√°sico 
        HMTL
        :where(h1, h2, h3) {
            color: green;
        }
    Isso deixa todos os t√≠tulos verdes, assim como faria o :is().
    ‚úÖ Mas se outro estilo mais espec√≠fico aparecer, ele vai sobrescrever facilmente.

    üìå Resumindo:
        :is() e :where() servem para agrupar seletores.
        :is() herda a especificidade do seletor mais forte.
        :where() sempre tem especificidade 0 ‚Üí √≥timo para estilos base/reset.
*/

/* :not(), :has()
üéØ O que √© :not()
    O :not() √© uma pseudo-classe que serve para selecionar tudo, exceto o que voc√™ indicar dentro dele.

    Ele √© muito √∫til para exce√ß√µes em seletores.

    Exemplo b√°sico
    p:not(.destaque) {
    color: gray;
    }
    üëâ Todos os <p> ficam cinza, menos os que tiverem a classe .destaque.

    Exemplo com v√°rios seletores
        Voc√™ pode usar uma lista dentro do :not():
        button:not(.ativo, .principal) {
            background: lightgray;
        }
    üëâ Aqui todos os bot√µes ficam cinza, exceto os que t√™m .ativo ou .principal.

    Combina√ß√£o com outros seletores
        li:not(:last-child) {
            margin-bottom: 10px;
        }
    üëâ Aplica margem em todos os <li>, menos no √∫ltimo.

    Diferen√ßa em rela√ß√£o ao :is() e :where()
        :is() ‚Üí inclui elementos que batem com o seletor.
        :where() ‚Üí igual ao :is(), mas com especificidade 0.
        :not() ‚Üí exclui elementos que batem com o seletor.

    üìå Resumo:
        :not() serve para criar exce√ß√µes.
        Voc√™ pode passar tags, classes, IDs ou pseudo-classes dentro dele.
        Muito √∫til para estilizar ‚Äútodos, menos esses‚Äù.

üéØ O que √© :has()
    O :has() funciona como um ‚Äúseletor pai condicional‚Äù.
    Ele seleciona um elemento se dentro dele existir algo espec√≠fico.

    üëâ √â quase como dizer em CSS: ‚Äúestilize este elemento SE ele contiver X‚Äù.

    Exemplo b√°sico
        article:has(img) {
            border: 2px solid blue;
        }
    üëâ Todos os <article> que tiverem uma <img> dentro v√£o ganhar uma borda azul.

    Exemplo com formul√°rios
        label:has(input:required) {
            font-weight: bold;
            color: red;
        }
    üëâ Todo <label> que tiver um <input required> fica vermelho e em negrito.

    Exemplo com listas
        li:has(ul) {
            background: lightyellow;
        }
    üëâ Estiliza <li> que tenham uma sub-lista (<ul>) dentro deles.

    Combina√ß√£o com outros seletores
        .card:has(.ativo) {
            background: lightgreen;
        }
    üëâ Apenas os .card que tiverem um filho com classe .ativo ficam verdes.
    
    Diferen√ßa para :not(), :is() e :where()
        :is() ‚Üí pega quem combina com a condi√ß√£o.
        :where() ‚Üí igual ao :is(), mas com especificidade zero.
        :not() ‚Üí exclui quem combina com a condi√ß√£o.
        :has() ‚Üí olha se dentro tem o que voc√™ passou.

    üìå Resumo r√°pido do :has()
        √â chamado de ‚Äúseletor relacional‚Äù, pois permite olhar para os filhos.
        Muito √∫til para formul√°rios, cards e listas.
        Ainda n√£o √© 100% suportado em todos os navegadores antigos, mas j√° funciona bem nos modernos (Chrome, Edge, Safari, etc).
            
*/

/*--------------------------------- Transi√ß√µes e Anima√ß√µes ----------------------------------------------------------------------- */

/* ----------- Transforma√ß√£o 2D ----------- */

/* translate()
üîπ O que √© translate()
    translate() move um elemento no eixo X e Y sem alterar o fluxo da p√°gina.
    Ele n√£o mexe no posicionamento real do elemento, apenas o desloca visualmente.
    Geralmente usado junto com a propriedade transform.

    üîπ Sintaxe
        transform: translate(x, y);

        x ‚Üí deslocamento horizontal (positivo = direita, negativo = esquerda)
        y ‚Üí deslocamento vertical (positivo = baixo, negativo = cima)
    Tamb√©m existem varia√ß√µes:
        translateX(px) ‚Üí s√≥ eixo X
        translateY(px) ‚Üí s√≥ eixo Y
        translateZ(px) ‚Üí eixo Z (3D)
        translate3d(x, y, z) ‚Üí todos os eixos

    üîπ Exemplo b√°sico
        .box {
            width: 100px;
            height: 100px;
            background: red;
            transform: translate(50px, 30px);
        }
    üëâ Isso move a .box 50px para a direita e 30px para baixo sem alterar os outros elementos da p√°gina.

    üîπ Usos comuns
        Anima√ß√µes com transition ou keyframes
        
        Movimentar elementos em hover:
            .button:hover {
                transform: translateY(-5px);
            }
        Criar sliders, galerias ou efeitos parallax

‚ö° Dica:
    Diferente de margin ou position: relative, translate() n√£o causa reflow, ou seja, √© mais leve para anima√ß√µes.

    */

/* rotate(), rotateX() e rotateY()
üîπ O que √© rotate()
    rotate() gira um elemento em torno de um ponto (por padr√£o, o centro do elemento).
    Faz parte da propriedade transform.
    O valor √© em graus (deg), radianos (rad) ou turns (turn).

    üîπ Sintaxe 
        transform: rotate(45deg);

        45deg ‚Üí gira 45¬∞ no sentido hor√°rio
        -45deg ‚Üí gira 45¬∞ no sentido anti-hor√°rio
    Outras unidades poss√≠veis:
        rad ‚Üí radianos (rotate(0.5rad))
        turn ‚Üí voltas completas (rotate(0.25turn) = 90¬∞)

    üîπ Exemplo b√°sico
        .box {
            width: 100px;
            height: 100px;
            background: red;
            transform: rotate(45deg);
        }
    üëâ A .box vai ficar rotacionada 45¬∞ em rela√ß√£o ao seu centro.

    üîπ Usos comuns
        Animar elementos girando (transition ou @keyframes)
        Criar ponteiros de rel√≥gio
        Girar √≠cones, setas, imagens, etc.

    ‚ö° Dica:
    O ponto de rota√ß√£o padr√£o √© o centro do elemento, mas voc√™ pode mudar com transform-origin.

üîπ rotateX()
    Gira o elemento em torno do eixo X (horizontal).
    Faz ele parecer que est√° virando para cima ou para baixo.
        Exemplo:
            .box {
                width: 150px;
                height: 150px;
                background: tomato;
                transform: rotateX(45deg);
            }
    üëâ A .box vai inclinar como se estivesse tombando para tr√°s ou para frente.

üîπ rotateY()
    Gira o elemento em torno do eixo Y (vertical).
    Faz ele parecer que est√° virando para os lados.
        Exemplo:
        .box {
            width: 150px;
            height: 150px;
            background: lightblue;
            transform: rotateY(45deg);
        }
    üëâ A .box vai inclinar como se estivesse virando para a esquerda ou direita.

üîπ Exemplo pr√°tico com ambos 
    .card {
        width: 200px;
        height: 200px;
        background: purple;
        color: white;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 20px;
        transform: rotateX(30deg) rotateY(30deg);
    }
    üëâ O elemento vai girar na diagonal, porque combinamos rotateX e rotateY.

üîπ Dicas importantes
    1. Para que o efeito 3D seja vis√≠vel, muitas vezes usamos tamb√©m:
            
        perspective: 500px;
            
        no elemento pai (container). Isso cria a sensa√ß√£o de profundidade.
    2. D√° para animar esses giros com transition ou @keyframes.
        
‚ö° Resumindo:
    rotateX() ‚Üí gira no eixo horizontal (cima/baixo).
    rotateY() ‚Üí gira no eixo vertical (esquerda/direita).
    Melhor efeito quando usado com perspective.

*/

/* scale(), scalex() e scaley()

üîπ O que √© scale()?
    O scale() aumenta ou diminui o tamanho de um elemento, esticando ou encolhendo ele sem alterar suas dimens√µes originais no c√≥digo.
    Ele funciona como um zoom.

    üîπ Sintaxe
            transform: scale(x, y);
        x ‚Üí escala no eixo horizontal (largura).
        y ‚Üí escala no eixo vertical (altura).
        Se passar s√≥ um valor, ele aplica nos dois eixos igualmente.

    üîπ Exemplos
        1. Escala uniforme
            .box {
                width: 100px;
                height: 100px;
                background: orange;
                transform: scale(1.5);
            }
        üëâ Aumenta 150% tanto na largura quanto na altura.
    
    ‚ö° Resumindo:
        scale(n) ‚Üí aumenta/diminui no mesmo eixo.
        scale(x, y) ‚Üí controla largura e altura separadamente.
        Usado em anima√ß√µes, hover e efeitos de zoom.

üîπ Diferen√ßa entre scaleX() e scaleY()
    scaleX() ‚Üí afeta somente a largura (eixo X).
    scaleY() ‚Üí afeta somente a altura (eixo Y).
    
    üîπ Exemplos pr√°ticos
        1. scaleX()
            .box {
            width: 100px;
            height: 100px;
            background: steelblue;
            transform: scaleX(2);
            }
        üëâ O quadrado fica duas vezes mais largo, mas a altura n√£o muda.

        2. scaleY()
            .box {
            width: 100px;
            height: 100px;
            background: tomato;
            transform: scaleY(1.5);
            }
        üëâ O quadrado fica 50% mais alto, mas a largura continua igual.

        3. scaleX(-1) (espelhamento horizontal)
            .box {
            transform: scaleX(-1);
            }
        üëâ Espelha o elemento na horizontal (como virar no espelho).

        4. scaleY(-1) (espelhamento vertical)
            .box {
            transform: scaleY(-1);
            }
        üëâ Espelha o elemento na vertical (fica de cabe√ßa pra baixo).

    ‚ö° Resumo r√°pido:
        scaleX(n) ‚Üí estica/encolhe na largura.
        scaleY(n) ‚Üí estica/encolhe na altura.
        Valores < 1 ‚Üí encolhem.
        Valores > 1 ‚Üí aumentam.
        Valores negativos ‚Üí espelham o elemento.

*/

/* skew(), skewX() e skewY()

üîπ Diferen√ßa entre skew(), skewX() e skewY()
    skew() ‚Üí inclina um elemento no eixo X e/ou eixo Y ao mesmo tempo.
    skewX() ‚Üí inclina s√≥ no eixo X (horizontal).
    skewY() ‚Üí inclina s√≥ no eixo Y (vertical).
    O valor usado √© em graus (deg).

üîπ Exemplos pr√°ticos
    1. skewX()
        .box {
            width: 100px;
            height: 100px;
            background: lightblue;
            transform: skewX(30deg);
        }
    üëâ O quadrado √© puxado para os lados, ficando inclinado horizontalmente.

    2. skewY()
        .box {
            width: 100px;
            height: 100px;
            background: lightgreen;
            transform: skewY(30deg);
        }
    üëâ O quadrado √© puxado para cima/baixo, ficando inclinado verticalmente.

    3. skew()
        .box {
            width: 100px;
            height: 100px;
            background: pink;
            transform: skew(30deg, 20deg);
        }
    üëâ O quadrado √© inclinado 30¬∞ no eixo X e 20¬∞ no eixo Y ao mesmo tempo.

Se passar apenas um valor (skew(30deg)), ele aplica no eixo X por padr√£o.

‚ö° Resumo r√°pido:
    skewX(√¢ngulo) ‚Üí inclina horizontalmente.
    skewY(√¢ngulo) ‚Üí inclina verticalmente.
    skew(x, y) ‚Üí inclina nos dois eixos de uma vez.


*/

/* matrix() 

O matrix() √© o mais avan√ßado dos transform: CSS, porque junta todas as transforma√ß√µes 2D (translate, scale, skew e rotate) em uma √∫nica fun√ß√£o matem√°tica.

üîπ Sintaxe
    transform: matrix(a, b, c, d, e, f);

Cada valor representa uma parte da transforma√ß√£o:
    a ‚Üí escala no eixo X (scaleX)
    b ‚Üí inclina√ß√£o no eixo Y (skewY)
    c ‚Üí inclina√ß√£o no eixo X (skewX)
    d ‚Üí escala no eixo Y (scaleY)
    e ‚Üí transla√ß√£o no eixo X (translateX)
    f ‚Üí transla√ß√£o no eixo Y (translateY)

üîπ Exemplos 
    1. S√≥ escala
        .box {
            width: 100px;
            height: 100px;
            background: lightblue;
            transform: matrix(2, 0, 0, 2, 0, 0); 
        }
    üëâ Dobra o tamanho no X e no Y (igual scale(2)).

    2. S√≥ transla√ß√£o
        .box {
            width: 100px;
            height: 100px;
            background: lightgreen;
            transform: matrix(1, 0, 0, 1, 50, 100); 
        }
    üëâ Move o quadrado 50px para a direita e 100px para baixo (igual translate(50px, 100px)).

    3. S√≥ rota√ß√£o (exemplo de 45¬∞)
        .box {
            width: 100px;
            height: 100px;
            background: pink;
            transform: matrix(0.707, 0.707, -0.707, 0.707, 0, 0);
        }
    üëâ Isso √© a forma ‚Äúmatem√°tica‚Äù do rotate(45deg).
    Os n√∫meros v√™m de seno e cosseno da rota√ß√£o.

‚ö° Resumo r√°pido:
    matrix() √© poderoso, mas dif√≠cil de usar ‚Äúna m√£o‚Äù.
    Ele combina scale, skew, translate e rotate.
    Normalmente, a gente usa as fun√ß√µes normais (translate, scale, rotate, skew) no dia a dia.
    O matrix() aparece mais em anima√ß√µes complexas ou quando o navegador gera valores calculados automaticamente.

*/

/* ----------- Transforma√ß√£o 3D ----------- */

/* perspective: ; e perspective-origin: ;

üîπ perspective
    Define a dist√¢ncia entre o observador e o plano Z (profundidade) do elemento.
    √â como se fosse a dist√¢ncia da c√¢mera at√© o objeto.
    Quanto menor o valor ‚Üí mais forte o efeito 3D (elementos parecem mais distorcidos).
    Quanto maior o valor ‚Üí efeito 3D mais sutil (quase plano).

    üìå Sintaxe:
        .container {
            perspective: 600px;
        }
    üëâ Aqui, qualquer elemento filho com transform: rotateX() ou rotateY() vai parecer girar em 3D, com profundidade.

üîπ perspective-origin
    Define o ponto de fuga (de onde a c√¢mera est√° olhando).
    Por padr√£o √© 50% 50% (centro do container).
    Pode ser alterado para mudar o ponto de vis√£o: top, left, right, bottom ou valores em % / px.

    üìå Sintaxe: 
        .container {
            perspective: 600px;
            perspective-origin: left top;
        }
    üëâ Isso faz parecer que a c√¢mera est√° olhando do canto superior esquerdo, mudando o √¢ngulo da distor√ß√£o 3D.

    
    ‚ö° Resumo r√°pido:
    perspective: ‚Üí qu√£o ‚Äúprofundo‚Äù √© o 3D (dist√¢ncia da c√¢mera).
    perspective-origin: ‚Üí de onde a c√¢mera olha (centro, canto, etc).
    
    üîπ Exemplo pr√°tico
    HTML
        <div class="scene">
            <div class="box"></div>
        </div>
    CSS
        .scene {
            perspective: 500px;
            perspective-origin: center top;
        }
        .box {
            width: 150px;
            height: 150px;
            background: lightblue;
            transform: rotateX(45deg) rotateY(30deg);
        }
    üëâ Resultado:
        O perspective: 500px d√° profundidade.
        O perspective-origin: center top muda o ponto de fuga para cima.
            
*/

/* translatex(), translatey(), translatez()

üîπ translateX()
    Move o elemento apenas no eixo X (horizontal).

    üìå Exemplo:
        .box {
            transform: translateX(100px); 100px para a direita 
        }

üîπ translateY()
    Move o elemento apenas no eixo Y (vertical).

    üìå Exemplo:
        .box {
            transform: translateY(-50px); 50px para cima
        }

üîπ translateZ()
    Move o elemento no eixo Z (profundidade, 3D).
    Precisa de um perspective definido no elemento pai para ser vis√≠vel.
    Valores positivos aproximam o objeto, negativos afastam.
    
    üìå Exemplo:
        .scene {
            perspective: 500px;
        }
        .box {
            transform: translateZ(100px); aproxima o elemento
        }

‚ö° Resum√£o r√°pido:
    translate(x, y) ‚Üí move em X e Y ao mesmo tempo.
    translateX() ‚Üí move s√≥ no eixo X.
    translateY() ‚Üí move s√≥ no eixo Y.
    translateZ() ‚Üí move no eixo Z (profundidade, precisa de perspective).
*/

/* transform-origin

O transform-origin define o ponto de refer√™ncia (origem) a partir do qual as transforma√ß√µes (rotate, scale, skew, etc.) acontecem.

    üîπ Por padr√£o
    O valor inicial √© 50% 50% (o centro do elemento).
    Ou seja, se voc√™ der um rotate, ele gira pelo meio.

    üîπ Sintaxe
        transform-origin: x y z;

        x ‚Üí eixo horizontal (pode ser left, center, right ou valores em px, %, etc.).
        y ‚Üí eixo vertical (pode ser top, center, bottom ou valores em px, %, etc.).
        z (opcional) ‚Üí define a origem em 3D, movendo o ponto de perspectiva.

    üîπ Exemplos
        üìå Girando em torno do canto superior esquerdo:
            .box {
                transform: rotate(45deg);
                transform-origin: top left;
            }
        üìå Ampliando em torno da borda inferior:
            .box {
                transform: scale(1.5);
                transform-origin: bottom center;
            }
        üìå Usando valores em pixels:
            .box {
                transform: rotate(45deg);
                transform-origin: 0px 100px;
            }
        üìå Usando 3D (z):
            .box {
                transform: rotateY(60deg);
                transform-origin: center center -100px;
            }

    üëâ Resumindo: transform-origin √© o piv√¥ das transforma√ß√µes.
    Se voc√™ n√£o muda, tudo gira/escala/entorta pelo centro.
    Se voc√™ muda, pode controlar exatamente de onde a transforma√ß√£o parte.
*/

/* transform-style
O transform-style √© uma propriedade do CSS usada em transforma√ß√µes 3D.

Ele define como os elementos filhos de um elemento com transforma√ß√µes 3D devem ser renderizados:
se v√£o ficar no mesmo plano (achatados) ou se v√£o preservar a profundidade em 3D.

üîπ Valores poss√≠veis
flat (padr√£o)
    Os filhos s√£o renderizados no mesmo plano 2D do elemento pai.
    Mesmo que voc√™ aplique rotateX, rotateY ou translateZ nos filhos, eles ficam ‚Äúachatados‚Äù.
preserve-3d
    Os filhos mant√™m suas pr√≥prias transforma√ß√µes 3D.
    Assim, cada filho pode ter profundidade (translateZ, rotateY, etc.), criando um verdadeiro espa√ßo 3D.

üîπ Sintaxe 
    transform-style: flat | preserve-3d;

üîπ Exemplos
    üìå Sem 3D (flat):
        .container {
            transform: rotateY(30deg);
            transform-style: flat; padr√£o 
        }
        .child {
            transform: translateZ(100px); n√£o ter√° efeito vis√≠vel
        }
    üìå Com 3D (preserve-3d):
        .container {
            transform: rotateY(30deg);
            transform-style: preserve-3d;
        }
        .child {
            transform: translateZ(100px); aparece em profundidade
        }
    üëâ Em resumo:
        flat = ignora transforma√ß√µes 3D nos filhos (eles ficam achatados no mesmo plano).
        preserve-3d = os filhos mant√™m suas transforma√ß√µes 3D, permitindo criar cubos, cartas virando, efeitos de profundidade etc.

    */

/* backface-visibility
A propriedade backface-visibility no CSS controla se o lado de tr√°s de um elemento (quando ele √© rotacionado em 3D) deve ficar vis√≠vel ou oculto.

Imagine um cart√£o que gira com rotateY(180deg):
    A frente √© o que voc√™ v√™ normalmente.
    O verso (backface) √© o "lado de tr√°s" desse cart√£o.

üîπ Valores
    visible (padr√£o): a parte de tr√°s continua vis√≠vel quando o elemento gira.
    hidden: a parte de tr√°s fica invis√≠vel quando o elemento √© girado.

üîπ Exemplo pr√°tico
    Um cart√£o que gira no eixo Y:
        .card {
            width: 150px;
            height: 200px;
            background: lightblue;
            transform: rotateY(180deg);
            backface-visibility: hidden;
        }
        üîç Se n√£o usar backface-visibility: hidden;, quando o cart√£o virar, voc√™ ainda ver√° a parte de tr√°s dele (ao contr√°rio, como se fosse espelhado).
        Com hidden, o verso desaparece e s√≥ aparece o que voc√™ definir como "lado de tr√°s" em outro elemento.

    üëâ Essa propriedade √© muito usada em anima√ß√µes de ‚Äúflip card‚Äù, tipo aqueles cart√µes que viram mostrando informa√ß√µes no outro lado.
*/

/* matrix3d() 

üîπ O que √© matrix3d()?
O matrix3d() √© uma fun√ß√£o do CSS usada dentro de transform.
Ele aplica transforma√ß√µes 3D complexas (transla√ß√£o, rota√ß√£o, escala, inclina√ß√£o e perspectiva) usando uma matriz 4x4 de 16 valores.

√â como a vers√£o avan√ßada do matrix() (2D), s√≥ que para o espa√ßo 3D.

üîπ Sintaxe
    transform: matrix3d(
        a1, b1, c1, d1,
        a2, b2, c2, d2,
        a3, b3, c3, d3,
        a4, b4, c4, d4
    );

üìå S√£o 16 valores, que definem como o navegador transforma o elemento no espa√ßo 3D.
    Os primeiros 12 valores controlam escala, rota√ß√£o e inclina√ß√£o.
    Os √∫ltimos 4 valores controlam transla√ß√£o (posi√ß√£o) e perspectiva.

üîπ Exemplo simples
    Mover um quadrado 100px para a direita no eixo X:

    .square {
        width: 100px;
        height: 100px;
        background: red;
        transform: matrix3d(
            1, 0, 0, 0,    linha 1 
            0, 1, 0, 0,    linha 2 
            0, 0, 1, 0,    linha 3 
            100, 0, 0, 1   linha 4 ‚Üí move 100px no eixo X 
        );
    }

üîπ Exemplo de rota√ß√£o em 3D
    Rotacionar no eixo Y:

    .square {
        transform: matrix3d(
            0, 0, 1, 0,
            0, 1, 0, 0,
            -1, 0, 0, 0,
            0, 0, 0, 1
        );
    }

üîπ Quando usar?
    üëâ Na pr√°tica, voc√™ quase nunca escreve matrix3d() manualmente, porque √© muito dif√≠cil calcular os 16 valores.

    Em vez disso, voc√™ usa fun√ß√µes como:
    rotateX()
    rotateY()
    translateZ()
    scale3d()

‚ö° O navegador converte tudo isso em uma matriz 3D internamente.
    Mas, se quiser efeitos bem personalizados, pode usar matrix3d() direto.

*/

/* ----------- Anima√ß√µes ----------- */

/* transition:

üéØ O que √© transition:?
    A propriedade transition serve para animar mudan√ßas suaves em outras propriedades CSS (como color, background, transform, etc.).
    Ela define o tempo e a forma como uma propriedade vai mudar de um valor para outro.
    Ela define o tempo e a forma como uma propriedade vai mudar de um valor para outro.
 
    üß© Sintaxe completa
        transition: propriedade dura√ß√£o fun√ß√£o-de-tempo delay;

        üìå Todos os valores:
            propriedade ‚Üí Qual propriedade vai ser animada (color, transform, all, etc.)
            dura√ß√£o ‚Üí Quanto tempo dura a transi√ß√£o (0.3s, 1s, etc.)
            fun√ß√£o-de-tempo (opcional) ‚Üí A velocidade da transi√ß√£o (ease, linear, ease-in, etc.)
            delay (opcional) ‚Üí Tempo de espera antes de come√ßar (0.2s, 1s, etc.)
            
    üß™ Exemplo b√°sico 
        button {
            background-color: blue;
            color: white;
            transition: background-color 0.5s;
        }
        button:hover {
            background-color: red;
        }
        üìå O bot√£o vai mudar de azul para vermelho suavemente em 0.5 segundos.

    üé® Exemplo com all (todas as propriedades)
        div {
            width: 100px;
            height: 100px;
            background: orange;
            transition: all 1s ease-in-out;
        }
        div:hover {
            width: 200px;
            background: purple;
        }
        üìå Vai animar tudo que mudar (width, background, etc.) em 1 segundo, com uma curva suave.

    üé¢ Resumo dos valores mais usados
        linear	    velocidade constante
        ease	    come√ßa devagar ‚Üí acelera ‚Üí termina devagar (padr√£o)
        ease-in	    come√ßa devagar ‚Üí termina r√°pido
        ease-out	come√ßa r√°pido ‚Üí termina devagar
        ease-in-out	come√ßa devagar ‚Üí acelera ‚Üí termina devagar

    ‚è±Ô∏è Exemplo com delay
        .box {
            background: green;
            transition: background 1s ease-in 0.5s;
        }
        .box:hover {
            background: yellow;
        }
        üìå A transi√ß√£o:
            dura 1 segundo
            come√ßa meio segundo depois do hover
            usa o estilo ease-in

    üé¨ Resumo simples
        transition: serve para animar mudan√ßas de estilo de forma suave e controlada.

    ‚úÖ Dica:
        transition-property: background-color;
        transition-duration: 0.5s;
        transition-timing-function: ease;
        transition-delay: 0.2s;

    Ou tudo junto:
        transition: background-color 0.5s ease 0.2s;

*/

/* Uma lista 
HTML
    <ul class="list">
        <li>
            <label for="">
                <input type="checkbox">
                <span>Tomate</span>
            </label>
        </li>
        <li>
            <label for="">
                <input type="checkbox">
                <span>Cogumelo</span>
            </label>
        </li>
        <li>
            <label for="">
                <input type="checkbox">
                <span>P√£es</span>
            </label>
        </li>
        <li>
            <label for="">
                <input type="checkbox">
                <span>P√™ssegos</span>
            </label>
        </li> 
        <li>
            <label for="">
                <input type="checkbox">
                <span>Macarr√£o </span>
            </label>
        </li>
        <li>
            <label for="">
                <input type="checkbox">
                <span>Leite condesado</span>
            </label>
        </li>
        <li>
            <label for="">
                <input type="checkbox">
                <span>Carne Moida</span>
            </label>
        </li>
    </ul>
CSS
    body{
        font-family: Arial, Helvetica, sans-serif;
        background-color: rgb(247, 247, 247);
        margin: 0;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .list li{
        color: white;
        list-style: none;
        font-weight: bold;
        padding: 12px 32px;
        margin-bottom: 4px;
        transition: background 1s;
    }

    .list li:hover{
        background-color: #b02151;
    }

    .list{
        background-color: #d53369;
        padding: 20px;
        border-radius: 4px;
        box-shadow: 20px 20px 10px lightgray;
    }

    .list input{
        accent-color: #daae51;
    }

    .list input:checked + span{
        text-decoration: line-through;
    }

    .list li:has(input:checked){
        background: #f0ab1a;
        color: #d53369;
        border-radius: 4px;
    }

*/

/* @keyframes

üéØ O que √© @keyframes?
    @keyframes define passos de uma anima√ß√£o no CSS.
    Enquanto o transition s√≥ anima uma mudan√ßa (ex: de azul ‚Üí vermelho),
    o @keyframes permite criar anima√ß√µes mais complexas, com v√°rias etapas.

    üß© Estrutura b√°sica
        @keyframes nomeDaAnimacao {
            from { propriedade: valor-inicial; }
            to   { propriedade: valor-final; }
        }
        üìå from = in√≠cio da anima√ß√£o
        üìå to = fim da anima√ß√£o

    üß™ Exemplo simples
        @keyframes mudarCor {
            from { background-color: blue; }
            to   { background-color: red; }
        }
        .box {
            width: 100px;
            height: 100px;
            background: blue;
            animation: mudarCor 2s ease-in-out infinite;
        }
        üìå Explicando:
            A cor da .box vai mudar de azul ‚Üí vermelho em 2 segundos
            ease-in-out define a suavidade
            infinite repete para sempre
    
    üé® Exemplo com m√∫ltiplos passos (%)
        @keyframes movimento {
            0%   { transform: translateX(0);   background: red; }
            50%  { transform: translateX(100px); background: yellow; }
            100% { transform: translateX(0);   background: green; }
        }
        .quadrado {
            width: 100px;
            height: 100px;
            background: red;
            animation: movimento 3s linear infinite;
        }
        üìå A caixa:
            Come√ßa vermelha (esquerda)
            Vai para amarela (direita, 50%)
            Volta verde (esquerda, 100%)
            E repete para sempre

    ‚öôÔ∏è Propriedades relacionadas
        Usadas junto com animation::
            animation-name ‚Üí Nome do @keyframes
            animation-duration ‚Üí Tempo da anima√ß√£o (2s, 5s)
            animation-timing-function ‚Üí Tipo de movimento (ease, linear, etc.)
            animation-delay ‚Üí Tempo para come√ßar (1s, 0.5s)
            animation-iteration-count ‚Üí Quantas vezes repete (1, 3, infinite)
            animation-direction ‚Üí Sentido (normal, reverse, alternate)
            animation-fill-mode ‚Üí Estado final (none, forwards, backwards, both)

    üé¨ Exemplo com tudo junto
        @keyframes girar {
            0%   { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }  
        }
        .roda {
            width: 100px;
            height: 100px;
            background: orange;
            animation: girar 2s linear infinite alternate;
        }
        üìå O quadrado:
            Gira de 0¬∞ a 360¬∞
            Demora 2 segundos
            √â linear
            Repete infinitamente
            Vai e volta (alternate)
        ‚úÖ Resumindo
            transition ‚Üí s√≥ anima de um estado para outro (mais simples).
            @keyframes ‚Üí cria anima√ß√µes complexas com v√°rias etapas.
                
    */

/* animation-delay:, animation-iteration-count:,  

üéØ animation-delay
    Define quanto tempo a anima√ß√£o vai esperar antes de come√ßar.
    Valor em segundos (s) ou milissegundos (ms).
    Exemplo:
        .box {
            animation-delay: 2s; -> espera 2 segundos para iniciar
        }

üéØ animation-iteration-count
    Define quantas vezes a anima√ß√£o vai rodar.
    Valores poss√≠veis:
        Um n√∫mero (ex: 3) ‚Üí roda 3 vezes.
        infinite ‚Üí roda para sempre.
    Exemplo:
        .box {
            animation-iteration-count: infinite; -> roda sem parar 
        }

üëâ Exemplo juntando os dois:
    .box {
        width: 150px;
        height: 150px;
        background: red;
        animation-name: fade;
        animation-duration: 3s;
        animation-delay: 1s;          -> espera 1s para come√ßar
        animation-iteration-count: 2; -> roda 2 vezes e para  
    }
    @keyframes fade {
        from { opacity: 0; }
        to { opacity: 1; }
    }

*/

/* animation-direction:, animation-timing-function:

üéØ animation-direction
    Define a dire√ß√£o que a anima√ß√£o segue a cada ciclo.
        Valores poss√≠veis:
            normal ‚Üí padr√£o, roda sempre do in√≠cio ao fim.
            reverse ‚Üí roda do fim para o in√≠cio.
            alternate ‚Üí vai e volta (um ciclo normal, o pr√≥ximo invertido).
            alternate-reverse ‚Üí igual ao alternate, mas come√ßa invertida.
    üîπ Exemplo:
        .box {
            animation-name: slide;
            animation-duration: 3s;
            animation-iteration-count: infinite;
            animation-direction: alternate; -> vai e volta 
        }

        @keyframes slide {
            from { transform: translateX(0); }
            to { transform: translateX(200px); }
        }

üéØ animation-timing-function
    Controla a velocidade do progresso da anima√ß√£o (como ela acelera e desacelera).
        Valores comuns:
            linear ‚Üí mesma velocidade o tempo todo.
            ease ‚Üí come√ßa devagar, acelera e termina devagar (padr√£o).
            ease-in ‚Üí come√ßa devagar e acelera.
            ease-out ‚Üí come√ßa r√°pido e desacelera.
            ease-in-out ‚Üí come√ßa devagar, acelera no meio e desacelera no fim.
            cubic-bezier(x1, y1, x2, y2) ‚Üí curva de acelera√ß√£o personalizada.
    üîπ Exemplo:
        .box {
            animation-name: bounce;
            animation-duration: 2s;
            animation-iteration-count: infinite;
            animation-timing-function: ease-in-out; -> acelera no meio
        }

        @keyframes bounce {
            from { transform: translateY(0); }
            to { transform: translateY(-100px); } 
        }

üëâ Resumindo:
    animation-direction ‚Üí controla o sentido da anima√ß√£o em cada repeti√ß√£o.
    animation-timing-function ‚Üí controla a velocidade/acelera√ß√£o dentro de cada ciclo.
*/

/* animation-fill-mode

üéØ O animation-fill-mode define como os estilos da anima√ß√£o s√£o aplicados antes e depois dela acontecer.

    üé® animation-fill-mode
        Ele controla o estado final ou inicial do elemento quando a anima√ß√£o n√£o est√° rodando ativamente.
            Valores poss√≠veis:
                none ‚Üí padr√£o. O elemento n√£o mant√©m nenhum estilo da anima√ß√£o fora do tempo ativo.
                forwards ‚Üí mant√©m os estilos do √∫ltimo frame da anima√ß√£o (ex: o 100% ou to).
                backwards ‚Üí aplica os estilos do primeiro frame da anima√ß√£o (ex: 0% ou from) durante o delay.
                both ‚Üí combina forwards + backwards. Mant√©m os estilos do primeiro frame no delay e os do √∫ltimo frame ap√≥s o fim.

    üîπ Exemplo pr√°tico:
        .box {
            width: 100px;
            height: 100px;
            background: red;
            animation-name: change;
            animation-duration: 3s;
            animation-delay: 2s;
            animation-fill-mode: forwards; -> mant√©m a cor final 
        }

        @keyframes change {
            from { background: red; }
            to { background: blue; }
        }
    Sem animation-fill-mode, depois da anima√ß√£o o quadrado volta a ser vermelho.
    Com forwards, ele fica azul mesmo ap√≥s acabar a anima√ß√£o.
    Com backwards, ele j√° ficaria vermelho durante os 2s de delay (mesmo antes de come√ßar).
    Com both, combina os dois comportamentos.

*/

/* animation-play-state

üéØ O animation-play-state controla se uma anima√ß√£o est√° rodando ou pausada.
    Valores poss√≠veis:
        running ‚Üí (padr√£o) a anima√ß√£o est√° em execu√ß√£o.
        paused ‚Üí a anima√ß√£o √© pausada no quadro atual.

    üîπ Exemplo pr√°tico:
        .box {
            width: 100px;
            height: 100px;
            background: red;
            animation: move 4s linear infinite;
            animation-play-state: running; -> ou paused
        }

        @keyframes move {
            from { transform: translateX(0); }
            to { transform: translateX(200px); }
        }
        Com running, o quadrado se move normalmente.
        Com paused, ele para no ponto em que estava da anima√ß√£o.

    üîπ Uso interativo (pausar ao passar o mouse):
        .box:hover {
            animation-play-state: paused;
        }
        üëâ Assim, a anima√ß√£o roda normalmente, mas quando o mouse passa por cima, ela congela.
*/

/* animation: √© o atalho (shorthand)

üéØ A propriedade animation: √© o atalho (shorthand) que re√∫ne todas as subpropriedades de anima√ß√£o em uma √∫nica linha.

üé® Sintaxe geral:
    animation: name duration timing-function delay iteration-count direction fill-mode play-state;
        Ordem mais usada (mas n√£o precisa usar todas):
            animation-name ‚Üí o nome do @keyframes.
            animation-duration ‚Üí tempo da anima√ß√£o (ex: 2s, 500ms).
            animation-timing-function ‚Üí como a anima√ß√£o progride (linear, ease, ease-in, etc).
            animation-delay ‚Üí tempo para come√ßar.
            animation-iteration-count ‚Üí quantas vezes repete (1, 3, infinite).
            animation-direction ‚Üí sentido (normal, reverse, alternate, alternate-reverse).
            animation-fill-mode ‚Üí estado final (none, forwards, backwards, both).
            animation-play-state ‚Üí execu√ß√£o (running, paused).

üîπ Exemplo simples:
    .box {
        width: 100px;
        height: 100px;
        background: blue;
        animation: move 3s linear infinite;
    }

    @keyframes move {
        from { transform: translateX(0); }
        to { transform: translateX(200px); }
    }
    ‚û° Aqui, a anima√ß√£o se chama move, dura 3 segundos, √© linear e roda para sempre (infinite).

üîπ Exemplo completo (com todos valores):
    .box {
        animation: move 5s ease-in-out 1s infinite alternate both running;
    }
    Isso significa:
        move ‚Üí nome do @keyframes
        5s ‚Üí dura√ß√£o
        ease-in-out ‚Üí acelera e desacelera
        1s ‚Üí delay (come√ßa depois de 1 segundo)
        infinite ‚Üí repete para sempre
        alternate ‚Üí vai e volta
        both ‚Üí mant√©m estilos aplicados antes e depois
        running ‚Üí come√ßa rodando
*/

/* ----------- Exemplos de Anima√ß√£o ----------- */

/* Exemplo pr√°tico de anima√ß√£o 1
HTML: 
    <body>
        <button>Clique aqui</button>
    </body>
CSS: 
    body{
        margin: 0;
        height: 100vh;
        background-color: #fefefe;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    ‚û° Remove margens, ocupa a tela toda, usa Flexbox para centralizar o bot√£o vertical e horizontalmente.
    
    button{
        padding: 12px 24px;
        border: none;
        border-radius: 4px;
        color: white;
        font-size: 1.5rem;
        background: linear-gradient(90deg, #d53369, #daae51);
        box-shadow: 8px 12px 7px lightgray;
        animation: wiggle 2.2s linear infinite;
    }
    ‚û° Bot√£o estilizado com:
        preenchimento (padding)
        cantos arredondados (border-radius)
        degrad√™ rosa ‚Üí dourado
        sombra leve
        anima√ß√£o wiggle infinita

    button:hover{
        cursor: pointer;
        filter: brightness(1.1);
    }
    ‚û° Quando passa o mouse, o bot√£o fica um pouco mais claro.

    @keyframes wiggle {
        0% { transform: rotate(0); }
        15% { transform: rotate(-15deg); }
        20% { transform: rotate(10deg); }
        25% { transform: rotate(-10deg); }
        30% { transform: rotate(10deg); }
        35% { transform: rotate(-10deg); }
        40%, 100% { transform: rotate(0); }
    }
    ‚û° Faz o bot√£o balan√ßar para os lados, retornando ao centro no final.

üí° Dica extra:
    Se quiser deixar a anima√ß√£o s√≥ quando passar o mouse, basta mover a linha animation: wiggle 2.2s linear infinite; para dentro do hover:
        button:hover {
            cursor: pointer;
            filter: brightness(1.1);
            animation: wiggle 2.2s linear infinite;
        }
    Assim, o bot√£o s√≥ balan√ßa quando o usu√°rio interage.
*/

/* Exemplo pr√°tico de anima√ß√£o 2 
HTML
    <body>
        <span class="loader"></span>
        <span class="loader"></span>
        <span class="loader"></span>
    </body>
    ‚û° Tr√™s spans com a classe loader, que v√£o virar bolinhas.

CSS
    body {
        margin: 0;
        height: 100vh;
        background-color: #fefefe;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    ‚û° Centraliza tudo no meio da tela.

    .loader {
        border: 5px solid #d53369;
        border-radius: 50%;
        margin: 8px;
    }
    ‚û° Cria cada c√≠rculo:
        borda grossa (border: 5px solid)
        formato redondo (border-radius: 50%)
        espa√ßamento entre eles (margin: 8px)

    Anima√ß√£o para cada bolinha
        .loader:nth-child(1){
            animation: loader .8s ease-in-out alternate infinite;
        }

        .loader:nth-child(2){
            animation: loader .8s ease-in-out .3s alternate infinite;
        }

        .loader:nth-child(3){
            animation: loader .8s ease-in-out .6s alternate infinite;
        }
    ‚û° Todas usam a mesma anima√ß√£o loader, mas com delays diferentes:
        1¬™ sem atraso
        2¬™ come√ßa 0.3s depois
        3¬™ come√ßa 0.6s depois
    Isso cria o efeito de onda.

    Keyframes
        @keyframes loader {
            to {
                transform: scale(1.8);
            }
        }
    ‚û° Faz a bolinha crescer at√© 1.8x o tamanho e, por estar com alternate infinite, ela volta ao normal repetidamente.
*/

/* Exemplo pr√°tico de anima√ß√£o 3 

HTML
    <body>
        <img class="rocket" width="300px" height="300px" src="./img/ChatGPT Image 28 de ago. de 2025, 07_39_48.png" alt="">
    </body>
    ‚û° Aqui voc√™ est√° colocando uma imagem dentro do body.
    ‚û° Essa imagem tem a classe .rocket, largura e altura fixadas em 300px.

CSS
    body {
        margin: 0;
        height: 100vh; -> ocupa toda a altura da tela
        display: flex;
        justify-content: center; -> centraliza horizontalmente
        align-items: center; -> centraliza verticalmente
        background: linear-gradient(180deg, rgb(34, 34, 34) 0%, rgb(34, 13, 80) 50%, rgb(74, 153, 230) 100%);
    }
    ‚û° O body est√° configurado para ocupar a tela inteira (100vh).
    ‚û° Usando display: flex ‚Üí a imagem fica no centro da tela.
    ‚û° O fundo √© um degrad√™ que vai de cinza escuro ‚Üí roxo ‚Üí azul.

    .rocket {
        animation: take-off-rocket 6s ease-in-out infinite alternate;
    }
    ‚û° A classe .rocket aplica uma anima√ß√£o chamada take-off-rocket.
    ‚û° Essa anima√ß√£o dura 6 segundos, tem uma curva de movimento suave (ease-in-out).
    ‚û° Ela vai rodar para sempre (infinite).
    ‚û° O alternate faz a anima√ß√£o ir e depois voltar (n√£o reinicia de repente).

    @keyframes take-off-rocket {
        0% {
            transform: translateY(20vh);
        }
        50% {
            transform: translateY(-80vh);
        }
        100% {
            transform: translateY(20vh);
        }
    }
    ‚û° Esse trecho define o que acontece com a imagem durante a anima√ß√£o.
    ‚û° transform: translateY(...) move o foguete no eixo vertical:
        20vh ‚Üí ele come√ßa um pouco abaixo do centro.
        -80vh ‚Üí ele sobe bastante, quase saindo da tela.
        20vh ‚Üí depois volta para a posi√ß√£o inicial.

‚úÖ Em resumo:
    Esse c√≥digo faz a imagem do foguete subir e descer continuamente, como se estivesse ‚Äúflutuando‚Äù ou fazendo um movimento de vai-e-vem no espa√ßo.
*/

/* Exemplo pr√°tico de anima√ß√£o 4

HTML
    <blockquote>
        <p class="gradient-word">J√∫lio C√©sar</p>
        <h1>show me the code</h1>
    </blockquote>
    ‚û° Um blockquote centraliza o conte√∫do (apesar de n√£o ser sem√¢nticamente o mais indicado aqui).
    ‚û° Dentro dele, h√° um par√°grafo (p) com a classe .gradient-word, que aplica efeito de gradiente no texto "J√∫lio C√©sar".
    ‚û° O h1 traz o t√≠tulo "show me the code".

CSS
    body{
        font-family: 'Quicksand', sans-serif;
        margin: 0;
        height: 100vh;
        color: white;
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
        background: linear-gradient(-45deg, #d53369, #daae51);
        background-size: 400% 400%;
        animation: gradient 5s ease infinite alternate;
    }
    ‚û° O body usa Flexbox para centralizar tudo na tela.
    ‚û° Fundo: gradiente entre rosa-avermelhado (#d53369) e dourado (#daae51).
    ‚û° background-size: 400% 400% ‚Üí amplia o fundo, permitindo "movimento".
    ‚û° animation: gradient 5s ease infinite alternate; ‚Üí anima o fundo, movendo o gradiente de um lado para outro com o @keyframes.

    h1{
        font-size: 3rem;
        margin: 0;
        position: relative;
        bottom: 40px;
    }
    ‚û° Deixa o t√≠tulo grande e ajusta um pouco a posi√ß√£o para subir em rela√ß√£o ao texto acima.

    .gradient-word{
        font-family: 'Pacifico', cursive;
        margin: 0;
        font-size: 4.5rem;
        line-height: 1;

        background: linear-gradient(0deg, transparent, rgba(24, 24, 24, .4));
        background-clip: text;
        -webkit-background-clip: text;
        color: transparent;
    }
    ‚û° O texto n√£o tem cor pr√≥pria (color: transparent).
    ‚û° A cor vis√≠vel vem do gradiente aplicado no fundo, mas recortado no formato das letras (background-clip: text).
    ‚û° Resultado: "J√∫lio C√©sar" aparece estilizado como se tivesse um brilho/transpar√™ncia.

    @keyframes gradient {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }
    ‚û° Move o fundo do degrad√™ horizontalmente de esquerda ‚Üí direita ‚Üí esquerda, criando o efeito de gradiente em movimento.

üîé Resumindo
üëâ Esse c√≥digo cria uma p√°gina centralizada com:
    Fundo animado em gradiente que se movimenta.
    Um texto estilizado "J√∫lio C√©sar" com gradiente aplicado no pr√≥prio texto.
    Um t√≠tulo "show me the code" logo abaixo.

*/

/* Exemplo pr√°tico de anima√ß√£o 5

HTML
    <body>
        <div class="box"></div> -> c√≠rculo colorido animado
        <h1>J√∫lio C√©sar</h1> -> t√≠tulo principal
        <p>Show me the code | Trilha de CSS</p> -> subt√≠tulo
    </body>
    ‚û° O div.box √© o elemento visual (um c√≠rculo difuso e colorido).
    ‚û° O h1 e o p s√£o os textos centrais.

CSS
    body{
        margin: 0;
        height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: #222;
        perspective: 300px;
        font-family: 'Quicksand', cursive;
    }
    ‚û° Remove margens, ocupa toda a tela (100vh).
    ‚û° Centraliza tudo com flexbox.
    ‚û° Define perspective: 300px; ‚Üí isso d√° profundidade 3D para os elementos animados.
    ‚û° Fundo escuro (#222).

    h1{
        font-size: 4rem;
        text-align: center;
        margin: 0;
    }

    p{
        color: white;
    }

    .box{
        position: absolute;
        background: linear-gradient(90deg, #fc466b, #3f5efb);
        border-radius: 50%;
        width: 300px;
        height: 300px;
        animation: example 5s infinite alternate;
        filter: blur(100px);
    }
    ‚û° √â um c√≠rculo (border-radius: 50%) com degrad√™ rosa ‚Üí azul.
    ‚û° Fica difuso por causa do filter: blur(100px) (parece um glow).
    ‚û° position: absolute; garante que ele fique atr√°s do texto.
    ‚û° Ele √© animado pelo @keyframes example.

    @keyframes example {
        0% {
            transform: rotateY(30deg) rotate(-25deg) translateZ(100px);
        }
        25% {
            transform: rotateY(-30deg) translateZ(100px);
        }
        50% {
            transform: rotateX(-50deg) translateZ(-100px);
        }
        75% {
            transform: rotateX(-50deg) translateZ(-100px);
        }
        100% {
            transform: rotateX(20deg) translateZ(0);
        }
    }
    ‚û° O c√≠rculo muda de posi√ß√£o no espa√ßo 3D, girando no eixo X e Y, al√©m de se aproximar e se afastar com translateZ.
    ‚û° O alternate faz a anima√ß√£o ir e voltar, criando um movimento cont√≠nuo de pulsa√ß√£o/flutua√ß√£o.

üîπ Resultado Final
    üëâ Voc√™ tem um fundo brilhante, fluido e animado em 3D, com um texto centralizado na frente.
    Parece uma aura colorida e em movimento atr√°s do t√≠tulo.
        
*/

/*------------------------------------ Boas Pr√°ticas ----------------------------------------------------------------------------- */

/* Hierarquia do efeito em cascata 

‚úÖ Pontos que o exemplo j√° demonstra bem:

    1. Hierarquia de CSS:
        Inline ‚Üí color: rgb(0, 255, 34);
        Interno ‚Üí <style> ‚Üí h2 { color: paleturquoise; background-color: black; }
        Externo ‚Üí style.css ‚Üí h2 { color: white; background-color: palevioletred; }
            Isso mostra como o navegador escolhe qual regra aplicar.

    2. Uso sem√¢ntico de HTML:
        <main>, <h1>, <p>, <ol> ‚Üí tags corretas para o conte√∫do.

    3. Organiza√ß√£o do CSS externo:
        Regras para main e h2 est√£o separadas, mantendo legibilidade.

‚úÖ A hierarquia do CSS (efeito em cascata) segue essa ordem de prioridade:

    1. Inline ‚Üí estilos aplicados diretamente no elemento HTML com o atributo style.
        Ex.: <h2 style="color: rgb(0, 255, 34);">.
        Sempre tem mais prioridade que os outros tipos de CSS.

    2. Interno ‚Üí estilos definidos dentro da tag <style> no <head> do HTML.
        Ex.:
            h2 {
                color: paleturquoise;
                background-color: black;
            }
            -> Tem prioridade menor que o inline, mas maior que o externo.
    
    3. Externo ‚Üí estilos definidos em arquivos CSS separados e linkados ao HTML.
        Ex.: style.css
            h2 {
                color: white;
                background-color: palevioletred;
            }
            -> Tem a menor prioridade, sendo aplicado apenas se n√£o houver conflito com interno ou inline.

üí° Resumo r√°pido:
    Inline > Interno > Externo ‚Üí quanto mais pr√≥ximo do elemento, maior a prioridade.

‚ö° Boas pr√°ticas que podem ser aplicadas aqui:
    1. Evitar inline styles
        Inline styles quebram a cascata natural e dificultam manuten√ß√£o.
        Exemplo: mover style="color: rgb(0, 255, 34);" para o CSS interno ou externo.

        CSS
            h2.exemplo {
                color: rgb(0, 255, 34);
            }
        HTML
            <h2 class="exemplo">[Exemplo de hierarquia]</h2>

    2. Evitar conflito de cores entre CSS interno e externo
        Prefira uma √∫nica fonte de estilos para um elemento, seja interno ou externo, para n√£o confundir a hierarquia.
    3. Nomenclatura de classes
        Usar classes descritivas ajuda na manuten√ß√£o: h2.exemplo, h2.titulo-principal.
    4. Coment√°rios no CSS
        Adicionar coment√°rios explicando cada regra ajuda outros desenvolvedores a entender a inten√ß√£o.

    -> Estilo do t√≠tulo principal do exemplo de hierarquia
        h2.exemplo {
            color: rgb(0, 255, 34);
            background-color: black;
        }

    5. Centraliza√ß√£o e responsividade
        main { max-width: 500px; margin: auto; } j√° √© uma boa pr√°tica para centralizar e limitar a largura.

Exemplo usado: 
    HTML
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <link rel="stylesheet" href="./assets/style.css">
            <title>Document</title>
            <style>
                h2{
                    color: paleturquoise;
                    background-color: black;
                }
            </style>
        </head>
        <body>
            <main>
                <h1>Hierarquia do Efeito em Cascata</h1>
                <p>Estabelece uma prioridade para aplica√ß√£o de uma regra de estilo, caso se tenha mais de uma regra para um
                    mesmo
                    seletor CSS.</p>
                <p>Se houver um conflito, o navegador ir√°:</p>
                <ol>
                    <li>Analisar todas as regras;</li>
                    <li>Ver o nivel de import√¢ncia na origem do elemnto;</li>
                    <li>Comparar a especificidade das declara√ß√¥es com mesmo nivel de import√¢ncia (entra o c√°lculo de
                        especificidade);</li>
                    <li>Em caso de empate do grau de especificidade, ir√° olhar a ordem de declara√ß√£o colocada dentro dos
                        arquivos de
                        c√≥digo. A regra CSS que for declarada por ultimo, ir√° ser selecionada.</li>
                </ol>
                <hr>
                <h2 style="color: rgb(0, 255, 34);">[Exemplo de hierarquia]</h2>
            </main>
        </body>
        </html>
    CSS
        main {
            max-width: 500px;
            margin: auto;
        }
        
        h2 {
            color: white;
            background-color: palevioletred;
        }
*/

/* Especificidade Hierarquia Inline=(style), ID(#), Classes, pseudo-classes e atributos, Tag HTML

Codigo usado como Exemplo na posi√ß√£o Ô∏è4Ô∏è‚É£.

1Ô∏è‚É£ Especificidade aplicada
    | Tipo                                | Pontos |
    | ----------------------------------- | ------ |
    | Inline                              | 1000   |
    | ID                                  | 100    |
    | Classes, pseudo-classes e atributos | 10     |
    | Tag HTML                            | 1      |

2Ô∏è‚É£ Aplicando as regras
    Texto 01 (<p style="background-color: red;" class="texto">)
        Inline ‚Üí 1000 pontos ‚Üí tem prioridade m√°xima.
        Resultado: vermelho, mesmo existindo regras internas e externas.

    Texto 02 (<p> dentro do <main id="conteudo">)
        Seletor #conteudo p ‚Üí ID (100) + tag (1) = 101 pontos
        Seletor p ‚Üí tag (1 ponto)
        Resultado: palevioletred (maior especificidade).

    Texto 03 (<p> fora do <main>)
        S√≥ tem seletor p ‚Üí tag (1 ponto)
        Resultado: palegreen

3Ô∏è‚É£ Pontos-chave do exemplo
    1. Inline sempre ganha, independentemente de classes ou IDs.
    2. IDs t√™m mais peso que classes ou tags.
    3. Combinar ID + classe + tag aumenta a especificidade (como #conteudo p.texto = 111 pontos).
    4. Tag simples (p) tem menor prioridade.

4Ô∏è‚É£ HTML e CSS
    HMTL 
        <main id="conteudo">
            <p style="background-color: red;" class="texto">Texto 01</p>
            <p>Texto 02</p>
        </main>
        <p>Texto 03</p>
        <br><hr><br>
        <h6>C√°lculo de Espec√≠ficidade</h6>
        <ol>
            <li>Inline: 1000 pontos</li>
            <li>Id: 100 pontos</li>
            <li>Classes, pseudo-classes e atributos: 10 pontos</li>
            <li>Tag HTML: 1 ponto</li>
        </ol>
        <br><hr><br>
        <ul>
            <li>#exemplo h1.titulo = 111 pontos</li>
            <li>a:hover = 11 pontos</li>
            <li>div p = 2 pontos</li>
        </ul>
    CSS
        p{
            background-color: palegreen;
        }
        #conteudo p{
            background-color: palevioletred;
        }
        #conteudo p.texto{
            background-color: paleturquoise;
        }
*/

/* !important 

üìå Regras de prioridade (resum√£o)
    1. !important sempre vence regras normais, mesmo com seletor menos espec√≠fico.
    2. Entre dois !important, vence o que tiver maior especificidade.
    3. Se a especificidade tamb√©m empatar, vence o que aparecer por √∫ltimo no CSS.

!IMPORTANT
HMTL 
    <body>
        <h1>!important</h1>
        <div>
            <p>N√≠vel de prioridade do efeito em cascata</p>
        </div>
        <ol>
            <li>Declara√ß√µes com !important do usu√°rio</li>
            <li>Declara√ß√µes com !important do desenvolvedor</li>
            <li>Folha de estilo do desenvolvedor
                <ol>
                    <li>CSS inline</li>
                    <li>CSS interno</li>
                    <li>CSS externo</li>
                    <li>Folha de estilos padr√µes do navegador</li>
                </ol>
            </li>
        </ol>
    </body>
CSS 
    p {
        color: red !important;
        font-size: 1.5rem;
    }

    div p{
        color: blue;
        font-size: 2rem;
    }

üìä An√°lise
    Seletor p
        color: red !important; ‚Üí tem prioridade m√°xima, vai sobrepor qualquer outra regra de cor.
        font-size: 1.5rem; ‚Üí sem !important, pode ser substitu√≠do se outra regra for mais espec√≠fica.
    Seletor div p
        color: blue; ‚Üí n√£o ser√° aplicado, porque o !important da regra anterior vence.
        font-size: 2rem; ‚Üí ser√° aplicado, porque div p (especificidade: 11 pontos) vence p (1 ponto).

‚úÖ Resultado final do <p> dentro do <div>:
    Cor: vermelho (red) ‚Üí por causa do !important.
    Tamanho da fonte: 2rem ‚Üí porque a regra div p √© mais espec√≠fica e n√£o houve !important no font-size.

*/

/* inherit 

üìå Resumo did√°tico para lembrar:
    Algumas propriedades s√£o herd√°veis por padr√£o (ex.: color, font-family, line-height).
    Outras n√£o s√£o herd√°veis, mas podem ser for√ßadas com inherit (ex.: border, margin, padding).
    Tamb√©m existem valores como initial (volta ao valor padr√£o do CSS) e unset (funciona como inherit se a propriedade for herd√°vel, sen√£o funciona como initial).

inherit
    HTML
        <body>
            <h1>Heran√ßa | CSS</h1>
            <div class="teste">
                <p>O Lorem Ipsum √© um texto modelo da ind√∫stria tipogr√°fica e de impress√£o.</p>
                <p>O Lorem Ipsum √© um texto modelo da ind√∫stria tipogr√°fica e de impress√£o. O Lorem Ipsum tem vindo a ser o
                    texto
                    padr√£o usado por estas ind√∫strias desde o ano de 1500, quando uma misturou os caracteres de um texto para
                    criar
                    um esp√©cime de livro.
                </p>
            </div>
        </body>
    CSS
        body{
            color: red;
        }
        .teste {
            padding: 8px;
            border: 2px solid blue;
        }
        .teste p{
            border: inherit;
            padding: inherit;
        }

üîé Entendendo o que acontece
    body { color: red; }
        A cor vermelha √© herdada automaticamente pelos elementos filhos (h1, p, etc.), pois a propriedade color √© herd√°vel por padr√£o.
        Resultado ‚Üí todos os textos ficam vermelhos.
    .teste { padding: 8px; border: 2px solid blue; }
        O div.teste tem um padding de 8px e uma borda azul de 2px.
    .teste p { border: inherit; padding: inherit; }
        Aqui entra a diferen√ßa:
            border: inherit; ‚Üí os <p> herdam a borda azul do elemento pai (div.teste).
            padding: inherit; ‚Üí os <p> herdam o padding de 8px do pai.

        ‚ö†Ô∏è Normalmente, padding e border n√£o s√£o herdados automaticamente.
        Mas quando usamos inherit, for√ßamos que os filhos recebam os valores do pai.

‚úÖ Resultado final:
    O texto (p) ‚Üí vermelho (heran√ßa natural do color).
    Cada <p> dentro de .teste ‚Üí com padding 8px e borda azul 2px, porque foram for√ßados a herdar via inherit.

*/

/* ----------- Organizando os Estilos CSS (Metodologias) ----------- */

/* Definindo vari√°veis com :root e var()

üìå Estrutura do c√≥digo
    HTML
        <body class="dark-theme">
            <h1>digital innovation one</h1>
            <a href="">Me inscrever</a>
            <p>Ola Mundo </p>
        </body>
    CSS
        :root{
            --font-size-title: 5rem;
            --text-color: red;
        }
        .light-theme{
            --bg-body: rgb(247, 239, 239);
            --bg-gradient: linear-gradient(90deg, #fc466b 0%, #3f5efb 100%);
        }
        .dark-theme{
            --bg-body: rgb(34, 34, 34);
            --bg-gradient: linear-gradient(90deg, #d53369 0%, #daae51 100%);
        }
        body{
            font-family: Arial, Helvetica, sans-serif;
            background-color: var(--bg-body);
            text-align: center;
        }
        h1{
            background: var(--bg-gradient);
            font-size: var(--font-size-title);
            text-align: center;
            background-clip: text;
            -webkit-background-clip: text;
            color: transparent;
        }
        a{
            text-decoration: none;
            background: var(--bg-gradient);
            padding: 8px 14px;
            border-radius: 4px;
            color: #fafafa;
        }
        p{
            color: var(--text-color, blue);
        }

üîé Como funciona aqui
    1. Defini√ß√µes globais com :root
        O seletor :root √© o mesmo que html, mas com maior especificidade para vari√°veis globais.
        Vari√°veis definidas aqui podem ser acessadas em qualquer lugar.
            :root {
                --font-size-title: 5rem;
                --text-color: red;
            }

    2. Temas (light e dark)
        Voc√™ definiu duas ‚Äúpaletas de cores‚Äù diferentes:
            .light-theme { ... }  
            .dark-theme { ... }
        Como o <body> tem a classe dark-theme, s√£o aplicados:
            --bg-body: rgb(34, 34, 34);
            --bg-gradient: linear-gradient(90deg, #d53369 0%, #daae51 100%);
    
    3. Uso das vari√°veis com var(--nome, fallback)
        var(--bg-body) ‚Üí aplica a cor de fundo definida pelo tema.
        var(--font-size-title) ‚Üí deixa o t√≠tulo gigante.
        var(--text-color, blue) ‚Üí usa --text-color se existir; se n√£o existir, usa azul como fallback.

‚úÖ Resultado final
    body ‚Üí fundo cinza escuro (dark theme).
    h1 ‚Üí texto com gradiente dourado/rosa, transparente e recortado no fundo.
    a ‚Üí bot√£o com gradiente e texto branco.
    p ‚Üí texto vermelho (--text-color do :root).

üìå Boas pr√°ticas que voc√™ j√° aplicou
    Usar :root para vari√°veis globais.
    Separar temas com classes (.light-theme / .dark-theme) ‚Üí f√°cil para alternar com JS.
    Usar fallback no var() (blue no caso do p).
    Centraliza√ß√£o de estilo sem repetir valores fixos.

üîπ 1. O que √© :root?
    O seletor :root representa o elemento raiz do documento (equivalente ao <html>).
    A diferen√ßa √© que :root tem maior especificidade do que html.
    √â o lugar ideal para definir vari√°veis globais de CSS, que podem ser reutilizadas em todo o c√≥digo. 

    Exemplo: 
        :root {
            --font-size-title: 5rem;
            --text-color: red;
        }
    Aqui voc√™ criou vari√°veis CSS Custom Properties, todas iniciadas com --.

üîπ 2. O que √© var()?
    A fun√ß√£o var(--nome-da-vari√°vel, valor-fallback) serve para usar uma vari√°vel definida em :root ou em qualquer outro seletor.
    O segundo par√¢metro (valor-fallback) √© opcional ‚Üí ser√° usado caso a vari√°vel n√£o esteja definida.

    Exemplo:
        p {
        color: var(--main-color, blue); usa --main-color, sen√£o aplica azul
        }

üîπ 3. Por que usar vari√°veis CSS?
    ‚úÖ Reutiliza√ß√£o ‚Üí voc√™ escreve um valor uma vez e usa em v√°rios lugares.
    ‚úÖ Manuten√ß√£o f√°cil ‚Üí se precisar mudar uma cor ou tamanho, muda s√≥ na vari√°vel.
    ‚úÖ Temas din√¢micos ‚Üí basta trocar a classe (.light-theme, .dark-theme) e todas as vari√°veis mudam.
    ‚úÖ Heran√ßa natural ‚Üí vari√°veis podem ser redefinidas em elementos filhos e sobrepor o valor global.

üìå Resumo:
    :root = lugar para centralizar vari√°veis globais.
    var() = fun√ß√£o que ‚Äúpuxa‚Äù o valor da vari√°vel e pode ter um valor de seguran√ßa (fallback).
    Essa combina√ß√£o √© perfeita para design escal√°vel, responsivo e f√°cil de manter.
*/

/* BEM (Block-Element-Modifier) no CSS

BEM √© uma metodologia de nomenclatura que ajuda a organizar classes CSS de forma clara, modular e escal√°vel. Ela divide o c√≥digo em tr√™s partes: Bloco, Elemento e Modificador.

1Ô∏è‚É£ Bloco (Block)
    Representa um componente independente, que pode existir sozinho.
        Exemplo: um menu, um bot√£o ou um card.
            <div class="menu"></div>
            <div class="button"></div>

2Ô∏è‚É£ Elemento (Element)
    √â uma parte do bloco que depende dele.
    Sintaxe: bloco__elemento (dois underlines)
        <div class="menu">
            <ul class="menu__list">
                <li class="menu__item">Home</li>
                <li class="menu__item">Sobre</li>
            </ul>
        </div>
    Aqui, menu__list e menu__item s√£o elementos do bloco menu.

3Ô∏è‚É£ Modificador (Modifier)
    Define varia√ß√µes de estilo ou estado de um bloco ou elemento.
    Sintaxe: bloco--modificador ou bloco__elemento--modificador (dois tra√ßos)
        <button class="button button--primary">Enviar</button>
        <button class="button button--secondary">Cancelar</button>
    Aqui, button--primary e button--secondary modificam o estilo do bloco button.
    
Benef√≠cios do BEM
    Facilita a leitura e manuten√ß√£o do CSS.
    Evita conflitos de nomes.
    Facilita o reuso de componentes.

    Exemplo: 
        <body class="dark-theme">
            <nav class="menu">
                <ul class="menu__list">
                    <li class="menu__item">In√≠cio</li>
                    <li class="menu__item">Sobre N√≥s</li>
                    <li class="menu__item">Contato</li>
                    <li class="menu__item">
                        <a href="www.linkedin.com/in/j√∫lio-c√©sar-santos-franco" class="menu__link">
                            Entrar
                        </a>
                    </li>
                </ul>
            </nav>
            <h1>digital innovation one</h1>
        </body>

1Ô∏è‚É£ Bloco
    menu √© o bloco principal da navega√ß√£o:
        
        <nav class="menu">...</nav>

    √â independente e representa o componente completo de menu. ‚úÖ

2Ô∏è‚É£ Elementos
    Voc√™ criou elementos dentro do bloco menu:
    
        <ul class="menu__list">...</ul>
        <li class="menu__item">...</li>
        <a class="menu__link">...</a>
    
    menu__list ‚Üí lista de itens do menu
    menu__item ‚Üí cada item da lista
    menu__link ‚Üí o link dentro do item do menu
    Tudo certo, os nomes seguem a l√≥gica bloco__elemento. ‚úÖ

3Ô∏è‚É£ Modificadores
    No seu c√≥digo ainda n√£o tem modificadores, mas poderia adicionar varia√ß√µes, por 
    exemplo:
        
        <li class="menu__item menu__item--active">In√≠cio</li>

    Aqui menu__item--active indicaria o item ativo.
    
*/

/* SMACSS (Scalable and Modular Architecture for CSS)

O que √© SMACSS?
    SMACSS (Scalable and Modular Architecture for CSS) √© uma metodologia de organiza√ß√£o de CSS que ajuda a criar estilos mais escal√°veis, modul√°veis e f√°ceis de manter, especialmente em projetos grandes.

Ela n√£o √© um framework, mas sim um conjunto de boas pr√°ticas e categorias de estilo.

Categorias principais no SMACSS
    SMACSS divide o CSS em 5 categorias:
    1Ô∏è‚É£ Base (Base Rules)
        Estilos globais para elementos HTML sem classes.
        Exemplo: reset de estilos ou tipografia padr√£o.
            body {
                font-family: Arial, sans-serif;
                line-height: 1.6;
                color: #333;
            }
            h1, h2, h3 {
                margin: 0;
                padding: 0;
            }

    2Ô∏è‚É£ Layout (Layout Rules)
        Estilos para grandes √°reas do layout, geralmente blocos que estruturam a p√°gina.
        Exemplo: cabe√ßalho, rodap√©, sidebar, container.
            .header {
                background-color: #f5f5f5;
                padding: 20px;
            }
            .footer {
                background-color: #222;
                color: #fff;
                padding: 20px;
            }

    3Ô∏è‚É£ Module (Module Rules)
        Estilos para componentes reutiliz√°veis, independentes do layout.
        Exemplo: menus, cards, bot√µes.
            .card {
                border: 1px solid #ddd;
                padding: 15px;
                border-radius: 5px;
            }
            .button {
                padding: 10px 20px;
                background-color: blue;
                color: white;
                border: none;
                cursor: pointer;
            }

    4Ô∏è‚É£ State (State Rules)
        Representam varia√ß√µes ou estados de m√≥dulos ou layouts.
        Exemplo: ativo, desabilitado, expandido, oculto.
            .button--disabled {
                background-color: gray;
                cursor: not-allowed;
            }
            .menu--open {
                display: block;
            }

    5Ô∏è‚É£ Theme (Theme Rules)
        Estilos para temas diferentes, cores ou estilos alternativos.
        Exemplo: tema escuro ou claro.
            .dark-theme {
                background-color: #121212;
                color: #fff;
            }
            .light-theme {
                background-color: #fff;
                color: #000;
            }

‚úÖ Vantagens do SMACSS
    Facilita a manuten√ß√£o do CSS em projetos grandes.
    Separa estilos globais, estruturais e espec√≠ficos.
    Combina bem com metodologias como BEM.
    Ajuda a evitar conflitos de CSS.
*/

/* OOCSS (Object Oriented CSS) 

üîπ O que √© OOCSS?
    OOCSS √© uma metodologia de escrita de CSS criada pela Nicole Sullivan, que aplica conceitos de Programa√ß√£o Orientada a Objetos (POO) ao CSS.
    A ideia √©: separar estrutura de apar√™ncia e reutilizar estilos como se fossem ‚Äúobjetos‚Äù.

    Assim, voc√™ cria classes mais reaproveit√°veis e modulares, em vez de duplicar regras para cada componente.

üîπ Princ√≠pios do OOCSS
    1Ô∏è‚É£ Separar estrutura da apar√™ncia
        Estrutura = regras que definem comportamento/forma (largura, padding, posicionamento).
        Apar√™ncia = cores, fontes, backgrounds.
    
    üëâ Exemplo:
        Estrutura (reutiliz√°vel)
            .box {
                padding: 20px;
                border: 1px solid #ddd;
            }

        Apar√™ncia
            .box--primary {
                background-color: blue;
                color: white;
            }
            .box--secondary {
                background-color: lightgray;
                color: black;
            }

    2Ô∏è‚É£ Separar cont√™iner do conte√∫do
        O estilo do cont√™iner n√£o deve depender do que est√° dentro dele.
        Isso evita que mudan√ßas no HTML quebre o CSS.
        üëâ Exemplo ruim:
            .card h2 {
            font-size: 20px;
            }

        üëâ Exemplo melhor (OOCSS):
            .card__title {
            font-size: 20px;
            }
üîπ Exemplo pr√°tico
    Um bot√£o em OOCSS:
        HTML: 
            <button class="btn btn--primary">Salvar</button>
            <button class="btn btn--secondary">Cancelar</button>
        CSS: 
            Estrutura do bot√£o (objeto base)
                .btn {
                    padding: 10px 15px;
                    border-radius: 5px;
                    cursor: pointer;
                    border: none;
                }

            Apar√™ncia (modificadores) 
                .btn--primary {
                    background: blue;
                    color: white;
                }
                .btn--secondary {
                    background: gray;
                    color: black;
                }
            Aqui, btn √© um objeto reutiliz√°vel, e os modificadores (--primary, --secondary) aplicam apar√™ncia diferente.

üîπ Diferen√ßa entre OOCSS e BEM
    OOCSS ‚Üí foco em reutiliza√ß√£o e separa√ß√£o de responsabilidades (estrutura x apar√™ncia).
    BEM ‚Üí foco em nomenclatura clara e hier√°rquica (bloco__elemento--modificador).
    Juntas, elas se complementam: voc√™ pode usar OOCSS para pensar objetos reaproveit√°veis, e BEM para nomear as classes.
        
*/

/*------------------------------------ Framework-CSS ----------------------------------------------------------------------------- */

/* Framework 
1. tailwindcss 
2. materializecss
3. bulma
4. bootstrap
*/













